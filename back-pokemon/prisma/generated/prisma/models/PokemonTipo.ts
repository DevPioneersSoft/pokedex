
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PokemonTipo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model PokemonTipo
 * 
 */
export type PokemonTipoModel = runtime.Types.Result.DefaultSelection<Prisma.$PokemonTipoPayload>

export type AggregatePokemonTipo = {
  _count: PokemonTipoCountAggregateOutputType | null
  _avg: PokemonTipoAvgAggregateOutputType | null
  _sum: PokemonTipoSumAggregateOutputType | null
  _min: PokemonTipoMinAggregateOutputType | null
  _max: PokemonTipoMaxAggregateOutputType | null
}

export type PokemonTipoAvgAggregateOutputType = {
  id: number | null
  pokemonId: number | null
  tipoPokemonId: number | null
}

export type PokemonTipoSumAggregateOutputType = {
  id: number | null
  pokemonId: number | null
  tipoPokemonId: number | null
}

export type PokemonTipoMinAggregateOutputType = {
  id: number | null
  pokemonId: number | null
  tipoPokemonId: number | null
}

export type PokemonTipoMaxAggregateOutputType = {
  id: number | null
  pokemonId: number | null
  tipoPokemonId: number | null
}

export type PokemonTipoCountAggregateOutputType = {
  id: number
  pokemonId: number
  tipoPokemonId: number
  _all: number
}


export type PokemonTipoAvgAggregateInputType = {
  id?: true
  pokemonId?: true
  tipoPokemonId?: true
}

export type PokemonTipoSumAggregateInputType = {
  id?: true
  pokemonId?: true
  tipoPokemonId?: true
}

export type PokemonTipoMinAggregateInputType = {
  id?: true
  pokemonId?: true
  tipoPokemonId?: true
}

export type PokemonTipoMaxAggregateInputType = {
  id?: true
  pokemonId?: true
  tipoPokemonId?: true
}

export type PokemonTipoCountAggregateInputType = {
  id?: true
  pokemonId?: true
  tipoPokemonId?: true
  _all?: true
}

export type PokemonTipoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PokemonTipo to aggregate.
   */
  where?: Prisma.PokemonTipoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PokemonTipos to fetch.
   */
  orderBy?: Prisma.PokemonTipoOrderByWithRelationInput | Prisma.PokemonTipoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PokemonTipoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PokemonTipos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PokemonTipos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PokemonTipos
  **/
  _count?: true | PokemonTipoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PokemonTipoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PokemonTipoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PokemonTipoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PokemonTipoMaxAggregateInputType
}

export type GetPokemonTipoAggregateType<T extends PokemonTipoAggregateArgs> = {
      [P in keyof T & keyof AggregatePokemonTipo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePokemonTipo[P]>
    : Prisma.GetScalarType<T[P], AggregatePokemonTipo[P]>
}




export type PokemonTipoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PokemonTipoWhereInput
  orderBy?: Prisma.PokemonTipoOrderByWithAggregationInput | Prisma.PokemonTipoOrderByWithAggregationInput[]
  by: Prisma.PokemonTipoScalarFieldEnum[] | Prisma.PokemonTipoScalarFieldEnum
  having?: Prisma.PokemonTipoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PokemonTipoCountAggregateInputType | true
  _avg?: PokemonTipoAvgAggregateInputType
  _sum?: PokemonTipoSumAggregateInputType
  _min?: PokemonTipoMinAggregateInputType
  _max?: PokemonTipoMaxAggregateInputType
}

export type PokemonTipoGroupByOutputType = {
  id: number
  pokemonId: number
  tipoPokemonId: number
  _count: PokemonTipoCountAggregateOutputType | null
  _avg: PokemonTipoAvgAggregateOutputType | null
  _sum: PokemonTipoSumAggregateOutputType | null
  _min: PokemonTipoMinAggregateOutputType | null
  _max: PokemonTipoMaxAggregateOutputType | null
}

type GetPokemonTipoGroupByPayload<T extends PokemonTipoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PokemonTipoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PokemonTipoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PokemonTipoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PokemonTipoGroupByOutputType[P]>
      }
    >
  >



export type PokemonTipoWhereInput = {
  AND?: Prisma.PokemonTipoWhereInput | Prisma.PokemonTipoWhereInput[]
  OR?: Prisma.PokemonTipoWhereInput[]
  NOT?: Prisma.PokemonTipoWhereInput | Prisma.PokemonTipoWhereInput[]
  id?: Prisma.IntFilter<"PokemonTipo"> | number
  pokemonId?: Prisma.IntFilter<"PokemonTipo"> | number
  tipoPokemonId?: Prisma.IntFilter<"PokemonTipo"> | number
  pokemon?: Prisma.XOR<Prisma.PokemonScalarRelationFilter, Prisma.PokemonWhereInput>
  tipoPokemon?: Prisma.XOR<Prisma.TipoPokemonScalarRelationFilter, Prisma.tipoPokemonWhereInput>
}

export type PokemonTipoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  pokemonId?: Prisma.SortOrder
  tipoPokemonId?: Prisma.SortOrder
  pokemon?: Prisma.PokemonOrderByWithRelationInput
  tipoPokemon?: Prisma.tipoPokemonOrderByWithRelationInput
}

export type PokemonTipoWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  pokemonId_tipoPokemonId?: Prisma.PokemonTipoPokemonIdTipoPokemonIdCompoundUniqueInput
  AND?: Prisma.PokemonTipoWhereInput | Prisma.PokemonTipoWhereInput[]
  OR?: Prisma.PokemonTipoWhereInput[]
  NOT?: Prisma.PokemonTipoWhereInput | Prisma.PokemonTipoWhereInput[]
  pokemonId?: Prisma.IntFilter<"PokemonTipo"> | number
  tipoPokemonId?: Prisma.IntFilter<"PokemonTipo"> | number
  pokemon?: Prisma.XOR<Prisma.PokemonScalarRelationFilter, Prisma.PokemonWhereInput>
  tipoPokemon?: Prisma.XOR<Prisma.TipoPokemonScalarRelationFilter, Prisma.tipoPokemonWhereInput>
}, "id" | "pokemonId_tipoPokemonId">

export type PokemonTipoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  pokemonId?: Prisma.SortOrder
  tipoPokemonId?: Prisma.SortOrder
  _count?: Prisma.PokemonTipoCountOrderByAggregateInput
  _avg?: Prisma.PokemonTipoAvgOrderByAggregateInput
  _max?: Prisma.PokemonTipoMaxOrderByAggregateInput
  _min?: Prisma.PokemonTipoMinOrderByAggregateInput
  _sum?: Prisma.PokemonTipoSumOrderByAggregateInput
}

export type PokemonTipoScalarWhereWithAggregatesInput = {
  AND?: Prisma.PokemonTipoScalarWhereWithAggregatesInput | Prisma.PokemonTipoScalarWhereWithAggregatesInput[]
  OR?: Prisma.PokemonTipoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PokemonTipoScalarWhereWithAggregatesInput | Prisma.PokemonTipoScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"PokemonTipo"> | number
  pokemonId?: Prisma.IntWithAggregatesFilter<"PokemonTipo"> | number
  tipoPokemonId?: Prisma.IntWithAggregatesFilter<"PokemonTipo"> | number
}

export type PokemonTipoCreateInput = {
  pokemon: Prisma.PokemonCreateNestedOneWithoutTiposInput
  tipoPokemon: Prisma.tipoPokemonCreateNestedOneWithoutPokemonesInput
}

export type PokemonTipoUncheckedCreateInput = {
  id?: number
  pokemonId: number
  tipoPokemonId: number
}

export type PokemonTipoUpdateInput = {
  pokemon?: Prisma.PokemonUpdateOneRequiredWithoutTiposNestedInput
  tipoPokemon?: Prisma.tipoPokemonUpdateOneRequiredWithoutPokemonesNestedInput
}

export type PokemonTipoUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  pokemonId?: Prisma.IntFieldUpdateOperationsInput | number
  tipoPokemonId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type PokemonTipoCreateManyInput = {
  id?: number
  pokemonId: number
  tipoPokemonId: number
}

export type PokemonTipoUpdateManyMutationInput = {

}

export type PokemonTipoUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  pokemonId?: Prisma.IntFieldUpdateOperationsInput | number
  tipoPokemonId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type PokemonTipoListRelationFilter = {
  every?: Prisma.PokemonTipoWhereInput
  some?: Prisma.PokemonTipoWhereInput
  none?: Prisma.PokemonTipoWhereInput
}

export type PokemonTipoOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PokemonTipoPokemonIdTipoPokemonIdCompoundUniqueInput = {
  pokemonId: number
  tipoPokemonId: number
}

export type PokemonTipoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pokemonId?: Prisma.SortOrder
  tipoPokemonId?: Prisma.SortOrder
}

export type PokemonTipoAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pokemonId?: Prisma.SortOrder
  tipoPokemonId?: Prisma.SortOrder
}

export type PokemonTipoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pokemonId?: Prisma.SortOrder
  tipoPokemonId?: Prisma.SortOrder
}

export type PokemonTipoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pokemonId?: Prisma.SortOrder
  tipoPokemonId?: Prisma.SortOrder
}

export type PokemonTipoSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pokemonId?: Prisma.SortOrder
  tipoPokemonId?: Prisma.SortOrder
}

export type PokemonTipoCreateNestedManyWithoutPokemonInput = {
  create?: Prisma.XOR<Prisma.PokemonTipoCreateWithoutPokemonInput, Prisma.PokemonTipoUncheckedCreateWithoutPokemonInput> | Prisma.PokemonTipoCreateWithoutPokemonInput[] | Prisma.PokemonTipoUncheckedCreateWithoutPokemonInput[]
  connectOrCreate?: Prisma.PokemonTipoCreateOrConnectWithoutPokemonInput | Prisma.PokemonTipoCreateOrConnectWithoutPokemonInput[]
  createMany?: Prisma.PokemonTipoCreateManyPokemonInputEnvelope
  connect?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
}

export type PokemonTipoUncheckedCreateNestedManyWithoutPokemonInput = {
  create?: Prisma.XOR<Prisma.PokemonTipoCreateWithoutPokemonInput, Prisma.PokemonTipoUncheckedCreateWithoutPokemonInput> | Prisma.PokemonTipoCreateWithoutPokemonInput[] | Prisma.PokemonTipoUncheckedCreateWithoutPokemonInput[]
  connectOrCreate?: Prisma.PokemonTipoCreateOrConnectWithoutPokemonInput | Prisma.PokemonTipoCreateOrConnectWithoutPokemonInput[]
  createMany?: Prisma.PokemonTipoCreateManyPokemonInputEnvelope
  connect?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
}

export type PokemonTipoUpdateManyWithoutPokemonNestedInput = {
  create?: Prisma.XOR<Prisma.PokemonTipoCreateWithoutPokemonInput, Prisma.PokemonTipoUncheckedCreateWithoutPokemonInput> | Prisma.PokemonTipoCreateWithoutPokemonInput[] | Prisma.PokemonTipoUncheckedCreateWithoutPokemonInput[]
  connectOrCreate?: Prisma.PokemonTipoCreateOrConnectWithoutPokemonInput | Prisma.PokemonTipoCreateOrConnectWithoutPokemonInput[]
  upsert?: Prisma.PokemonTipoUpsertWithWhereUniqueWithoutPokemonInput | Prisma.PokemonTipoUpsertWithWhereUniqueWithoutPokemonInput[]
  createMany?: Prisma.PokemonTipoCreateManyPokemonInputEnvelope
  set?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  disconnect?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  delete?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  connect?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  update?: Prisma.PokemonTipoUpdateWithWhereUniqueWithoutPokemonInput | Prisma.PokemonTipoUpdateWithWhereUniqueWithoutPokemonInput[]
  updateMany?: Prisma.PokemonTipoUpdateManyWithWhereWithoutPokemonInput | Prisma.PokemonTipoUpdateManyWithWhereWithoutPokemonInput[]
  deleteMany?: Prisma.PokemonTipoScalarWhereInput | Prisma.PokemonTipoScalarWhereInput[]
}

export type PokemonTipoUncheckedUpdateManyWithoutPokemonNestedInput = {
  create?: Prisma.XOR<Prisma.PokemonTipoCreateWithoutPokemonInput, Prisma.PokemonTipoUncheckedCreateWithoutPokemonInput> | Prisma.PokemonTipoCreateWithoutPokemonInput[] | Prisma.PokemonTipoUncheckedCreateWithoutPokemonInput[]
  connectOrCreate?: Prisma.PokemonTipoCreateOrConnectWithoutPokemonInput | Prisma.PokemonTipoCreateOrConnectWithoutPokemonInput[]
  upsert?: Prisma.PokemonTipoUpsertWithWhereUniqueWithoutPokemonInput | Prisma.PokemonTipoUpsertWithWhereUniqueWithoutPokemonInput[]
  createMany?: Prisma.PokemonTipoCreateManyPokemonInputEnvelope
  set?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  disconnect?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  delete?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  connect?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  update?: Prisma.PokemonTipoUpdateWithWhereUniqueWithoutPokemonInput | Prisma.PokemonTipoUpdateWithWhereUniqueWithoutPokemonInput[]
  updateMany?: Prisma.PokemonTipoUpdateManyWithWhereWithoutPokemonInput | Prisma.PokemonTipoUpdateManyWithWhereWithoutPokemonInput[]
  deleteMany?: Prisma.PokemonTipoScalarWhereInput | Prisma.PokemonTipoScalarWhereInput[]
}

export type PokemonTipoCreateNestedManyWithoutTipoPokemonInput = {
  create?: Prisma.XOR<Prisma.PokemonTipoCreateWithoutTipoPokemonInput, Prisma.PokemonTipoUncheckedCreateWithoutTipoPokemonInput> | Prisma.PokemonTipoCreateWithoutTipoPokemonInput[] | Prisma.PokemonTipoUncheckedCreateWithoutTipoPokemonInput[]
  connectOrCreate?: Prisma.PokemonTipoCreateOrConnectWithoutTipoPokemonInput | Prisma.PokemonTipoCreateOrConnectWithoutTipoPokemonInput[]
  createMany?: Prisma.PokemonTipoCreateManyTipoPokemonInputEnvelope
  connect?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
}

export type PokemonTipoUncheckedCreateNestedManyWithoutTipoPokemonInput = {
  create?: Prisma.XOR<Prisma.PokemonTipoCreateWithoutTipoPokemonInput, Prisma.PokemonTipoUncheckedCreateWithoutTipoPokemonInput> | Prisma.PokemonTipoCreateWithoutTipoPokemonInput[] | Prisma.PokemonTipoUncheckedCreateWithoutTipoPokemonInput[]
  connectOrCreate?: Prisma.PokemonTipoCreateOrConnectWithoutTipoPokemonInput | Prisma.PokemonTipoCreateOrConnectWithoutTipoPokemonInput[]
  createMany?: Prisma.PokemonTipoCreateManyTipoPokemonInputEnvelope
  connect?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
}

export type PokemonTipoUpdateManyWithoutTipoPokemonNestedInput = {
  create?: Prisma.XOR<Prisma.PokemonTipoCreateWithoutTipoPokemonInput, Prisma.PokemonTipoUncheckedCreateWithoutTipoPokemonInput> | Prisma.PokemonTipoCreateWithoutTipoPokemonInput[] | Prisma.PokemonTipoUncheckedCreateWithoutTipoPokemonInput[]
  connectOrCreate?: Prisma.PokemonTipoCreateOrConnectWithoutTipoPokemonInput | Prisma.PokemonTipoCreateOrConnectWithoutTipoPokemonInput[]
  upsert?: Prisma.PokemonTipoUpsertWithWhereUniqueWithoutTipoPokemonInput | Prisma.PokemonTipoUpsertWithWhereUniqueWithoutTipoPokemonInput[]
  createMany?: Prisma.PokemonTipoCreateManyTipoPokemonInputEnvelope
  set?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  disconnect?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  delete?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  connect?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  update?: Prisma.PokemonTipoUpdateWithWhereUniqueWithoutTipoPokemonInput | Prisma.PokemonTipoUpdateWithWhereUniqueWithoutTipoPokemonInput[]
  updateMany?: Prisma.PokemonTipoUpdateManyWithWhereWithoutTipoPokemonInput | Prisma.PokemonTipoUpdateManyWithWhereWithoutTipoPokemonInput[]
  deleteMany?: Prisma.PokemonTipoScalarWhereInput | Prisma.PokemonTipoScalarWhereInput[]
}

export type PokemonTipoUncheckedUpdateManyWithoutTipoPokemonNestedInput = {
  create?: Prisma.XOR<Prisma.PokemonTipoCreateWithoutTipoPokemonInput, Prisma.PokemonTipoUncheckedCreateWithoutTipoPokemonInput> | Prisma.PokemonTipoCreateWithoutTipoPokemonInput[] | Prisma.PokemonTipoUncheckedCreateWithoutTipoPokemonInput[]
  connectOrCreate?: Prisma.PokemonTipoCreateOrConnectWithoutTipoPokemonInput | Prisma.PokemonTipoCreateOrConnectWithoutTipoPokemonInput[]
  upsert?: Prisma.PokemonTipoUpsertWithWhereUniqueWithoutTipoPokemonInput | Prisma.PokemonTipoUpsertWithWhereUniqueWithoutTipoPokemonInput[]
  createMany?: Prisma.PokemonTipoCreateManyTipoPokemonInputEnvelope
  set?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  disconnect?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  delete?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  connect?: Prisma.PokemonTipoWhereUniqueInput | Prisma.PokemonTipoWhereUniqueInput[]
  update?: Prisma.PokemonTipoUpdateWithWhereUniqueWithoutTipoPokemonInput | Prisma.PokemonTipoUpdateWithWhereUniqueWithoutTipoPokemonInput[]
  updateMany?: Prisma.PokemonTipoUpdateManyWithWhereWithoutTipoPokemonInput | Prisma.PokemonTipoUpdateManyWithWhereWithoutTipoPokemonInput[]
  deleteMany?: Prisma.PokemonTipoScalarWhereInput | Prisma.PokemonTipoScalarWhereInput[]
}

export type PokemonTipoCreateWithoutPokemonInput = {
  tipoPokemon: Prisma.tipoPokemonCreateNestedOneWithoutPokemonesInput
}

export type PokemonTipoUncheckedCreateWithoutPokemonInput = {
  id?: number
  tipoPokemonId: number
}

export type PokemonTipoCreateOrConnectWithoutPokemonInput = {
  where: Prisma.PokemonTipoWhereUniqueInput
  create: Prisma.XOR<Prisma.PokemonTipoCreateWithoutPokemonInput, Prisma.PokemonTipoUncheckedCreateWithoutPokemonInput>
}

export type PokemonTipoCreateManyPokemonInputEnvelope = {
  data: Prisma.PokemonTipoCreateManyPokemonInput | Prisma.PokemonTipoCreateManyPokemonInput[]
  skipDuplicates?: boolean
}

export type PokemonTipoUpsertWithWhereUniqueWithoutPokemonInput = {
  where: Prisma.PokemonTipoWhereUniqueInput
  update: Prisma.XOR<Prisma.PokemonTipoUpdateWithoutPokemonInput, Prisma.PokemonTipoUncheckedUpdateWithoutPokemonInput>
  create: Prisma.XOR<Prisma.PokemonTipoCreateWithoutPokemonInput, Prisma.PokemonTipoUncheckedCreateWithoutPokemonInput>
}

export type PokemonTipoUpdateWithWhereUniqueWithoutPokemonInput = {
  where: Prisma.PokemonTipoWhereUniqueInput
  data: Prisma.XOR<Prisma.PokemonTipoUpdateWithoutPokemonInput, Prisma.PokemonTipoUncheckedUpdateWithoutPokemonInput>
}

export type PokemonTipoUpdateManyWithWhereWithoutPokemonInput = {
  where: Prisma.PokemonTipoScalarWhereInput
  data: Prisma.XOR<Prisma.PokemonTipoUpdateManyMutationInput, Prisma.PokemonTipoUncheckedUpdateManyWithoutPokemonInput>
}

export type PokemonTipoScalarWhereInput = {
  AND?: Prisma.PokemonTipoScalarWhereInput | Prisma.PokemonTipoScalarWhereInput[]
  OR?: Prisma.PokemonTipoScalarWhereInput[]
  NOT?: Prisma.PokemonTipoScalarWhereInput | Prisma.PokemonTipoScalarWhereInput[]
  id?: Prisma.IntFilter<"PokemonTipo"> | number
  pokemonId?: Prisma.IntFilter<"PokemonTipo"> | number
  tipoPokemonId?: Prisma.IntFilter<"PokemonTipo"> | number
}

export type PokemonTipoCreateWithoutTipoPokemonInput = {
  pokemon: Prisma.PokemonCreateNestedOneWithoutTiposInput
}

export type PokemonTipoUncheckedCreateWithoutTipoPokemonInput = {
  id?: number
  pokemonId: number
}

export type PokemonTipoCreateOrConnectWithoutTipoPokemonInput = {
  where: Prisma.PokemonTipoWhereUniqueInput
  create: Prisma.XOR<Prisma.PokemonTipoCreateWithoutTipoPokemonInput, Prisma.PokemonTipoUncheckedCreateWithoutTipoPokemonInput>
}

export type PokemonTipoCreateManyTipoPokemonInputEnvelope = {
  data: Prisma.PokemonTipoCreateManyTipoPokemonInput | Prisma.PokemonTipoCreateManyTipoPokemonInput[]
  skipDuplicates?: boolean
}

export type PokemonTipoUpsertWithWhereUniqueWithoutTipoPokemonInput = {
  where: Prisma.PokemonTipoWhereUniqueInput
  update: Prisma.XOR<Prisma.PokemonTipoUpdateWithoutTipoPokemonInput, Prisma.PokemonTipoUncheckedUpdateWithoutTipoPokemonInput>
  create: Prisma.XOR<Prisma.PokemonTipoCreateWithoutTipoPokemonInput, Prisma.PokemonTipoUncheckedCreateWithoutTipoPokemonInput>
}

export type PokemonTipoUpdateWithWhereUniqueWithoutTipoPokemonInput = {
  where: Prisma.PokemonTipoWhereUniqueInput
  data: Prisma.XOR<Prisma.PokemonTipoUpdateWithoutTipoPokemonInput, Prisma.PokemonTipoUncheckedUpdateWithoutTipoPokemonInput>
}

export type PokemonTipoUpdateManyWithWhereWithoutTipoPokemonInput = {
  where: Prisma.PokemonTipoScalarWhereInput
  data: Prisma.XOR<Prisma.PokemonTipoUpdateManyMutationInput, Prisma.PokemonTipoUncheckedUpdateManyWithoutTipoPokemonInput>
}

export type PokemonTipoCreateManyPokemonInput = {
  id?: number
  tipoPokemonId: number
}

export type PokemonTipoUpdateWithoutPokemonInput = {
  tipoPokemon?: Prisma.tipoPokemonUpdateOneRequiredWithoutPokemonesNestedInput
}

export type PokemonTipoUncheckedUpdateWithoutPokemonInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tipoPokemonId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type PokemonTipoUncheckedUpdateManyWithoutPokemonInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tipoPokemonId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type PokemonTipoCreateManyTipoPokemonInput = {
  id?: number
  pokemonId: number
}

export type PokemonTipoUpdateWithoutTipoPokemonInput = {
  pokemon?: Prisma.PokemonUpdateOneRequiredWithoutTiposNestedInput
}

export type PokemonTipoUncheckedUpdateWithoutTipoPokemonInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  pokemonId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type PokemonTipoUncheckedUpdateManyWithoutTipoPokemonInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  pokemonId?: Prisma.IntFieldUpdateOperationsInput | number
}



export type PokemonTipoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pokemonId?: boolean
  tipoPokemonId?: boolean
  pokemon?: boolean | Prisma.PokemonDefaultArgs<ExtArgs>
  tipoPokemon?: boolean | Prisma.tipoPokemonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pokemonTipo"]>

export type PokemonTipoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pokemonId?: boolean
  tipoPokemonId?: boolean
  pokemon?: boolean | Prisma.PokemonDefaultArgs<ExtArgs>
  tipoPokemon?: boolean | Prisma.tipoPokemonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pokemonTipo"]>

export type PokemonTipoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pokemonId?: boolean
  tipoPokemonId?: boolean
  pokemon?: boolean | Prisma.PokemonDefaultArgs<ExtArgs>
  tipoPokemon?: boolean | Prisma.tipoPokemonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pokemonTipo"]>

export type PokemonTipoSelectScalar = {
  id?: boolean
  pokemonId?: boolean
  tipoPokemonId?: boolean
}

export type PokemonTipoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "pokemonId" | "tipoPokemonId", ExtArgs["result"]["pokemonTipo"]>
export type PokemonTipoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  pokemon?: boolean | Prisma.PokemonDefaultArgs<ExtArgs>
  tipoPokemon?: boolean | Prisma.tipoPokemonDefaultArgs<ExtArgs>
}
export type PokemonTipoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  pokemon?: boolean | Prisma.PokemonDefaultArgs<ExtArgs>
  tipoPokemon?: boolean | Prisma.tipoPokemonDefaultArgs<ExtArgs>
}
export type PokemonTipoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  pokemon?: boolean | Prisma.PokemonDefaultArgs<ExtArgs>
  tipoPokemon?: boolean | Prisma.tipoPokemonDefaultArgs<ExtArgs>
}

export type $PokemonTipoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PokemonTipo"
  objects: {
    pokemon: Prisma.$PokemonPayload<ExtArgs>
    tipoPokemon: Prisma.$tipoPokemonPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    pokemonId: number
    tipoPokemonId: number
  }, ExtArgs["result"]["pokemonTipo"]>
  composites: {}
}

export type PokemonTipoGetPayload<S extends boolean | null | undefined | PokemonTipoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PokemonTipoPayload, S>

export type PokemonTipoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PokemonTipoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PokemonTipoCountAggregateInputType | true
  }

export interface PokemonTipoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PokemonTipo'], meta: { name: 'PokemonTipo' } }
  /**
   * Find zero or one PokemonTipo that matches the filter.
   * @param {PokemonTipoFindUniqueArgs} args - Arguments to find a PokemonTipo
   * @example
   * // Get one PokemonTipo
   * const pokemonTipo = await prisma.pokemonTipo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PokemonTipoFindUniqueArgs>(args: Prisma.SelectSubset<T, PokemonTipoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PokemonTipoClient<runtime.Types.Result.GetResult<Prisma.$PokemonTipoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PokemonTipo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PokemonTipoFindUniqueOrThrowArgs} args - Arguments to find a PokemonTipo
   * @example
   * // Get one PokemonTipo
   * const pokemonTipo = await prisma.pokemonTipo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PokemonTipoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PokemonTipoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PokemonTipoClient<runtime.Types.Result.GetResult<Prisma.$PokemonTipoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PokemonTipo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PokemonTipoFindFirstArgs} args - Arguments to find a PokemonTipo
   * @example
   * // Get one PokemonTipo
   * const pokemonTipo = await prisma.pokemonTipo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PokemonTipoFindFirstArgs>(args?: Prisma.SelectSubset<T, PokemonTipoFindFirstArgs<ExtArgs>>): Prisma.Prisma__PokemonTipoClient<runtime.Types.Result.GetResult<Prisma.$PokemonTipoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PokemonTipo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PokemonTipoFindFirstOrThrowArgs} args - Arguments to find a PokemonTipo
   * @example
   * // Get one PokemonTipo
   * const pokemonTipo = await prisma.pokemonTipo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PokemonTipoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PokemonTipoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PokemonTipoClient<runtime.Types.Result.GetResult<Prisma.$PokemonTipoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PokemonTipos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PokemonTipoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PokemonTipos
   * const pokemonTipos = await prisma.pokemonTipo.findMany()
   * 
   * // Get first 10 PokemonTipos
   * const pokemonTipos = await prisma.pokemonTipo.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pokemonTipoWithIdOnly = await prisma.pokemonTipo.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PokemonTipoFindManyArgs>(args?: Prisma.SelectSubset<T, PokemonTipoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PokemonTipoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PokemonTipo.
   * @param {PokemonTipoCreateArgs} args - Arguments to create a PokemonTipo.
   * @example
   * // Create one PokemonTipo
   * const PokemonTipo = await prisma.pokemonTipo.create({
   *   data: {
   *     // ... data to create a PokemonTipo
   *   }
   * })
   * 
   */
  create<T extends PokemonTipoCreateArgs>(args: Prisma.SelectSubset<T, PokemonTipoCreateArgs<ExtArgs>>): Prisma.Prisma__PokemonTipoClient<runtime.Types.Result.GetResult<Prisma.$PokemonTipoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PokemonTipos.
   * @param {PokemonTipoCreateManyArgs} args - Arguments to create many PokemonTipos.
   * @example
   * // Create many PokemonTipos
   * const pokemonTipo = await prisma.pokemonTipo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PokemonTipoCreateManyArgs>(args?: Prisma.SelectSubset<T, PokemonTipoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PokemonTipos and returns the data saved in the database.
   * @param {PokemonTipoCreateManyAndReturnArgs} args - Arguments to create many PokemonTipos.
   * @example
   * // Create many PokemonTipos
   * const pokemonTipo = await prisma.pokemonTipo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PokemonTipos and only return the `id`
   * const pokemonTipoWithIdOnly = await prisma.pokemonTipo.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PokemonTipoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PokemonTipoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PokemonTipoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PokemonTipo.
   * @param {PokemonTipoDeleteArgs} args - Arguments to delete one PokemonTipo.
   * @example
   * // Delete one PokemonTipo
   * const PokemonTipo = await prisma.pokemonTipo.delete({
   *   where: {
   *     // ... filter to delete one PokemonTipo
   *   }
   * })
   * 
   */
  delete<T extends PokemonTipoDeleteArgs>(args: Prisma.SelectSubset<T, PokemonTipoDeleteArgs<ExtArgs>>): Prisma.Prisma__PokemonTipoClient<runtime.Types.Result.GetResult<Prisma.$PokemonTipoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PokemonTipo.
   * @param {PokemonTipoUpdateArgs} args - Arguments to update one PokemonTipo.
   * @example
   * // Update one PokemonTipo
   * const pokemonTipo = await prisma.pokemonTipo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PokemonTipoUpdateArgs>(args: Prisma.SelectSubset<T, PokemonTipoUpdateArgs<ExtArgs>>): Prisma.Prisma__PokemonTipoClient<runtime.Types.Result.GetResult<Prisma.$PokemonTipoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PokemonTipos.
   * @param {PokemonTipoDeleteManyArgs} args - Arguments to filter PokemonTipos to delete.
   * @example
   * // Delete a few PokemonTipos
   * const { count } = await prisma.pokemonTipo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PokemonTipoDeleteManyArgs>(args?: Prisma.SelectSubset<T, PokemonTipoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PokemonTipos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PokemonTipoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PokemonTipos
   * const pokemonTipo = await prisma.pokemonTipo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PokemonTipoUpdateManyArgs>(args: Prisma.SelectSubset<T, PokemonTipoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PokemonTipos and returns the data updated in the database.
   * @param {PokemonTipoUpdateManyAndReturnArgs} args - Arguments to update many PokemonTipos.
   * @example
   * // Update many PokemonTipos
   * const pokemonTipo = await prisma.pokemonTipo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PokemonTipos and only return the `id`
   * const pokemonTipoWithIdOnly = await prisma.pokemonTipo.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PokemonTipoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PokemonTipoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PokemonTipoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PokemonTipo.
   * @param {PokemonTipoUpsertArgs} args - Arguments to update or create a PokemonTipo.
   * @example
   * // Update or create a PokemonTipo
   * const pokemonTipo = await prisma.pokemonTipo.upsert({
   *   create: {
   *     // ... data to create a PokemonTipo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PokemonTipo we want to update
   *   }
   * })
   */
  upsert<T extends PokemonTipoUpsertArgs>(args: Prisma.SelectSubset<T, PokemonTipoUpsertArgs<ExtArgs>>): Prisma.Prisma__PokemonTipoClient<runtime.Types.Result.GetResult<Prisma.$PokemonTipoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PokemonTipos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PokemonTipoCountArgs} args - Arguments to filter PokemonTipos to count.
   * @example
   * // Count the number of PokemonTipos
   * const count = await prisma.pokemonTipo.count({
   *   where: {
   *     // ... the filter for the PokemonTipos we want to count
   *   }
   * })
  **/
  count<T extends PokemonTipoCountArgs>(
    args?: Prisma.Subset<T, PokemonTipoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PokemonTipoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PokemonTipo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PokemonTipoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PokemonTipoAggregateArgs>(args: Prisma.Subset<T, PokemonTipoAggregateArgs>): Prisma.PrismaPromise<GetPokemonTipoAggregateType<T>>

  /**
   * Group by PokemonTipo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PokemonTipoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PokemonTipoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PokemonTipoGroupByArgs['orderBy'] }
      : { orderBy?: PokemonTipoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PokemonTipoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPokemonTipoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PokemonTipo model
 */
readonly fields: PokemonTipoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PokemonTipo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PokemonTipoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  pokemon<T extends Prisma.PokemonDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PokemonDefaultArgs<ExtArgs>>): Prisma.Prisma__PokemonClient<runtime.Types.Result.GetResult<Prisma.$PokemonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  tipoPokemon<T extends Prisma.tipoPokemonDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.tipoPokemonDefaultArgs<ExtArgs>>): Prisma.Prisma__tipoPokemonClient<runtime.Types.Result.GetResult<Prisma.$tipoPokemonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PokemonTipo model
 */
export interface PokemonTipoFieldRefs {
  readonly id: Prisma.FieldRef<"PokemonTipo", 'Int'>
  readonly pokemonId: Prisma.FieldRef<"PokemonTipo", 'Int'>
  readonly tipoPokemonId: Prisma.FieldRef<"PokemonTipo", 'Int'>
}
    

// Custom InputTypes
/**
 * PokemonTipo findUnique
 */
export type PokemonTipoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PokemonTipo
   */
  select?: Prisma.PokemonTipoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PokemonTipo
   */
  omit?: Prisma.PokemonTipoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonTipoInclude<ExtArgs> | null
  /**
   * Filter, which PokemonTipo to fetch.
   */
  where: Prisma.PokemonTipoWhereUniqueInput
}

/**
 * PokemonTipo findUniqueOrThrow
 */
export type PokemonTipoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PokemonTipo
   */
  select?: Prisma.PokemonTipoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PokemonTipo
   */
  omit?: Prisma.PokemonTipoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonTipoInclude<ExtArgs> | null
  /**
   * Filter, which PokemonTipo to fetch.
   */
  where: Prisma.PokemonTipoWhereUniqueInput
}

/**
 * PokemonTipo findFirst
 */
export type PokemonTipoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PokemonTipo
   */
  select?: Prisma.PokemonTipoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PokemonTipo
   */
  omit?: Prisma.PokemonTipoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonTipoInclude<ExtArgs> | null
  /**
   * Filter, which PokemonTipo to fetch.
   */
  where?: Prisma.PokemonTipoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PokemonTipos to fetch.
   */
  orderBy?: Prisma.PokemonTipoOrderByWithRelationInput | Prisma.PokemonTipoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PokemonTipos.
   */
  cursor?: Prisma.PokemonTipoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PokemonTipos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PokemonTipos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PokemonTipos.
   */
  distinct?: Prisma.PokemonTipoScalarFieldEnum | Prisma.PokemonTipoScalarFieldEnum[]
}

/**
 * PokemonTipo findFirstOrThrow
 */
export type PokemonTipoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PokemonTipo
   */
  select?: Prisma.PokemonTipoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PokemonTipo
   */
  omit?: Prisma.PokemonTipoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonTipoInclude<ExtArgs> | null
  /**
   * Filter, which PokemonTipo to fetch.
   */
  where?: Prisma.PokemonTipoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PokemonTipos to fetch.
   */
  orderBy?: Prisma.PokemonTipoOrderByWithRelationInput | Prisma.PokemonTipoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PokemonTipos.
   */
  cursor?: Prisma.PokemonTipoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PokemonTipos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PokemonTipos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PokemonTipos.
   */
  distinct?: Prisma.PokemonTipoScalarFieldEnum | Prisma.PokemonTipoScalarFieldEnum[]
}

/**
 * PokemonTipo findMany
 */
export type PokemonTipoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PokemonTipo
   */
  select?: Prisma.PokemonTipoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PokemonTipo
   */
  omit?: Prisma.PokemonTipoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonTipoInclude<ExtArgs> | null
  /**
   * Filter, which PokemonTipos to fetch.
   */
  where?: Prisma.PokemonTipoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PokemonTipos to fetch.
   */
  orderBy?: Prisma.PokemonTipoOrderByWithRelationInput | Prisma.PokemonTipoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PokemonTipos.
   */
  cursor?: Prisma.PokemonTipoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PokemonTipos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PokemonTipos.
   */
  skip?: number
  distinct?: Prisma.PokemonTipoScalarFieldEnum | Prisma.PokemonTipoScalarFieldEnum[]
}

/**
 * PokemonTipo create
 */
export type PokemonTipoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PokemonTipo
   */
  select?: Prisma.PokemonTipoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PokemonTipo
   */
  omit?: Prisma.PokemonTipoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonTipoInclude<ExtArgs> | null
  /**
   * The data needed to create a PokemonTipo.
   */
  data: Prisma.XOR<Prisma.PokemonTipoCreateInput, Prisma.PokemonTipoUncheckedCreateInput>
}

/**
 * PokemonTipo createMany
 */
export type PokemonTipoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PokemonTipos.
   */
  data: Prisma.PokemonTipoCreateManyInput | Prisma.PokemonTipoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PokemonTipo createManyAndReturn
 */
export type PokemonTipoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PokemonTipo
   */
  select?: Prisma.PokemonTipoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PokemonTipo
   */
  omit?: Prisma.PokemonTipoOmit<ExtArgs> | null
  /**
   * The data used to create many PokemonTipos.
   */
  data: Prisma.PokemonTipoCreateManyInput | Prisma.PokemonTipoCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonTipoIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PokemonTipo update
 */
export type PokemonTipoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PokemonTipo
   */
  select?: Prisma.PokemonTipoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PokemonTipo
   */
  omit?: Prisma.PokemonTipoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonTipoInclude<ExtArgs> | null
  /**
   * The data needed to update a PokemonTipo.
   */
  data: Prisma.XOR<Prisma.PokemonTipoUpdateInput, Prisma.PokemonTipoUncheckedUpdateInput>
  /**
   * Choose, which PokemonTipo to update.
   */
  where: Prisma.PokemonTipoWhereUniqueInput
}

/**
 * PokemonTipo updateMany
 */
export type PokemonTipoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PokemonTipos.
   */
  data: Prisma.XOR<Prisma.PokemonTipoUpdateManyMutationInput, Prisma.PokemonTipoUncheckedUpdateManyInput>
  /**
   * Filter which PokemonTipos to update
   */
  where?: Prisma.PokemonTipoWhereInput
  /**
   * Limit how many PokemonTipos to update.
   */
  limit?: number
}

/**
 * PokemonTipo updateManyAndReturn
 */
export type PokemonTipoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PokemonTipo
   */
  select?: Prisma.PokemonTipoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PokemonTipo
   */
  omit?: Prisma.PokemonTipoOmit<ExtArgs> | null
  /**
   * The data used to update PokemonTipos.
   */
  data: Prisma.XOR<Prisma.PokemonTipoUpdateManyMutationInput, Prisma.PokemonTipoUncheckedUpdateManyInput>
  /**
   * Filter which PokemonTipos to update
   */
  where?: Prisma.PokemonTipoWhereInput
  /**
   * Limit how many PokemonTipos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonTipoIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PokemonTipo upsert
 */
export type PokemonTipoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PokemonTipo
   */
  select?: Prisma.PokemonTipoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PokemonTipo
   */
  omit?: Prisma.PokemonTipoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonTipoInclude<ExtArgs> | null
  /**
   * The filter to search for the PokemonTipo to update in case it exists.
   */
  where: Prisma.PokemonTipoWhereUniqueInput
  /**
   * In case the PokemonTipo found by the `where` argument doesn't exist, create a new PokemonTipo with this data.
   */
  create: Prisma.XOR<Prisma.PokemonTipoCreateInput, Prisma.PokemonTipoUncheckedCreateInput>
  /**
   * In case the PokemonTipo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PokemonTipoUpdateInput, Prisma.PokemonTipoUncheckedUpdateInput>
}

/**
 * PokemonTipo delete
 */
export type PokemonTipoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PokemonTipo
   */
  select?: Prisma.PokemonTipoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PokemonTipo
   */
  omit?: Prisma.PokemonTipoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonTipoInclude<ExtArgs> | null
  /**
   * Filter which PokemonTipo to delete.
   */
  where: Prisma.PokemonTipoWhereUniqueInput
}

/**
 * PokemonTipo deleteMany
 */
export type PokemonTipoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PokemonTipos to delete
   */
  where?: Prisma.PokemonTipoWhereInput
  /**
   * Limit how many PokemonTipos to delete.
   */
  limit?: number
}

/**
 * PokemonTipo without action
 */
export type PokemonTipoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PokemonTipo
   */
  select?: Prisma.PokemonTipoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PokemonTipo
   */
  omit?: Prisma.PokemonTipoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonTipoInclude<ExtArgs> | null
}

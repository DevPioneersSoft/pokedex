
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Pokemon` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Pokemon
 * 
 */
export type PokemonModel = runtime.Types.Result.DefaultSelection<Prisma.$PokemonPayload>

export type AggregatePokemon = {
  _count: PokemonCountAggregateOutputType | null
  _avg: PokemonAvgAggregateOutputType | null
  _sum: PokemonSumAggregateOutputType | null
  _min: PokemonMinAggregateOutputType | null
  _max: PokemonMaxAggregateOutputType | null
}

export type PokemonAvgAggregateOutputType = {
  id: number | null
  numero: number | null
  ataque: number | null
  defensa: number | null
  ataque_especial: number | null
  defensa_especial: number | null
  velocidad: number | null
  altura: number | null
  peso: number | null
  orden: number | null
}

export type PokemonSumAggregateOutputType = {
  id: number | null
  numero: number | null
  ataque: number | null
  defensa: number | null
  ataque_especial: number | null
  defensa_especial: number | null
  velocidad: number | null
  altura: number | null
  peso: number | null
  orden: number | null
}

export type PokemonMinAggregateOutputType = {
  id: number | null
  numero: number | null
  nombre: string | null
  descripcion: string | null
  grunido: string | null
  imagen: string | null
  ataque: number | null
  defensa: number | null
  ataque_especial: number | null
  defensa_especial: number | null
  velocidad: number | null
  altura: number | null
  peso: number | null
  sprite: string | null
  orden: number | null
  creadoEn: Date | null
  actualizadoEn: Date | null
}

export type PokemonMaxAggregateOutputType = {
  id: number | null
  numero: number | null
  nombre: string | null
  descripcion: string | null
  grunido: string | null
  imagen: string | null
  ataque: number | null
  defensa: number | null
  ataque_especial: number | null
  defensa_especial: number | null
  velocidad: number | null
  altura: number | null
  peso: number | null
  sprite: string | null
  orden: number | null
  creadoEn: Date | null
  actualizadoEn: Date | null
}

export type PokemonCountAggregateOutputType = {
  id: number
  numero: number
  nombre: number
  descripcion: number
  grunido: number
  imagen: number
  ataque: number
  defensa: number
  ataque_especial: number
  defensa_especial: number
  velocidad: number
  altura: number
  peso: number
  sprite: number
  orden: number
  creadoEn: number
  actualizadoEn: number
  _all: number
}


export type PokemonAvgAggregateInputType = {
  id?: true
  numero?: true
  ataque?: true
  defensa?: true
  ataque_especial?: true
  defensa_especial?: true
  velocidad?: true
  altura?: true
  peso?: true
  orden?: true
}

export type PokemonSumAggregateInputType = {
  id?: true
  numero?: true
  ataque?: true
  defensa?: true
  ataque_especial?: true
  defensa_especial?: true
  velocidad?: true
  altura?: true
  peso?: true
  orden?: true
}

export type PokemonMinAggregateInputType = {
  id?: true
  numero?: true
  nombre?: true
  descripcion?: true
  grunido?: true
  imagen?: true
  ataque?: true
  defensa?: true
  ataque_especial?: true
  defensa_especial?: true
  velocidad?: true
  altura?: true
  peso?: true
  sprite?: true
  orden?: true
  creadoEn?: true
  actualizadoEn?: true
}

export type PokemonMaxAggregateInputType = {
  id?: true
  numero?: true
  nombre?: true
  descripcion?: true
  grunido?: true
  imagen?: true
  ataque?: true
  defensa?: true
  ataque_especial?: true
  defensa_especial?: true
  velocidad?: true
  altura?: true
  peso?: true
  sprite?: true
  orden?: true
  creadoEn?: true
  actualizadoEn?: true
}

export type PokemonCountAggregateInputType = {
  id?: true
  numero?: true
  nombre?: true
  descripcion?: true
  grunido?: true
  imagen?: true
  ataque?: true
  defensa?: true
  ataque_especial?: true
  defensa_especial?: true
  velocidad?: true
  altura?: true
  peso?: true
  sprite?: true
  orden?: true
  creadoEn?: true
  actualizadoEn?: true
  _all?: true
}

export type PokemonAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Pokemon to aggregate.
   */
  where?: Prisma.PokemonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pokemon to fetch.
   */
  orderBy?: Prisma.PokemonOrderByWithRelationInput | Prisma.PokemonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PokemonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pokemon from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pokemon.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Pokemon
  **/
  _count?: true | PokemonCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PokemonAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PokemonSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PokemonMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PokemonMaxAggregateInputType
}

export type GetPokemonAggregateType<T extends PokemonAggregateArgs> = {
      [P in keyof T & keyof AggregatePokemon]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePokemon[P]>
    : Prisma.GetScalarType<T[P], AggregatePokemon[P]>
}




export type PokemonGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PokemonWhereInput
  orderBy?: Prisma.PokemonOrderByWithAggregationInput | Prisma.PokemonOrderByWithAggregationInput[]
  by: Prisma.PokemonScalarFieldEnum[] | Prisma.PokemonScalarFieldEnum
  having?: Prisma.PokemonScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PokemonCountAggregateInputType | true
  _avg?: PokemonAvgAggregateInputType
  _sum?: PokemonSumAggregateInputType
  _min?: PokemonMinAggregateInputType
  _max?: PokemonMaxAggregateInputType
}

export type PokemonGroupByOutputType = {
  id: number
  numero: number
  nombre: string
  descripcion: string
  grunido: string
  imagen: string
  ataque: number
  defensa: number
  ataque_especial: number
  defensa_especial: number
  velocidad: number
  altura: number
  peso: number
  sprite: string
  orden: number
  creadoEn: Date
  actualizadoEn: Date
  _count: PokemonCountAggregateOutputType | null
  _avg: PokemonAvgAggregateOutputType | null
  _sum: PokemonSumAggregateOutputType | null
  _min: PokemonMinAggregateOutputType | null
  _max: PokemonMaxAggregateOutputType | null
}

type GetPokemonGroupByPayload<T extends PokemonGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PokemonGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PokemonGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PokemonGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PokemonGroupByOutputType[P]>
      }
    >
  >



export type PokemonWhereInput = {
  AND?: Prisma.PokemonWhereInput | Prisma.PokemonWhereInput[]
  OR?: Prisma.PokemonWhereInput[]
  NOT?: Prisma.PokemonWhereInput | Prisma.PokemonWhereInput[]
  id?: Prisma.IntFilter<"Pokemon"> | number
  numero?: Prisma.IntFilter<"Pokemon"> | number
  nombre?: Prisma.StringFilter<"Pokemon"> | string
  descripcion?: Prisma.StringFilter<"Pokemon"> | string
  grunido?: Prisma.StringFilter<"Pokemon"> | string
  imagen?: Prisma.StringFilter<"Pokemon"> | string
  ataque?: Prisma.IntFilter<"Pokemon"> | number
  defensa?: Prisma.IntFilter<"Pokemon"> | number
  ataque_especial?: Prisma.IntFilter<"Pokemon"> | number
  defensa_especial?: Prisma.IntFilter<"Pokemon"> | number
  velocidad?: Prisma.IntFilter<"Pokemon"> | number
  altura?: Prisma.IntFilter<"Pokemon"> | number
  peso?: Prisma.IntFilter<"Pokemon"> | number
  sprite?: Prisma.StringFilter<"Pokemon"> | string
  orden?: Prisma.IntFilter<"Pokemon"> | number
  creadoEn?: Prisma.DateTimeFilter<"Pokemon"> | Date | string
  actualizadoEn?: Prisma.DateTimeFilter<"Pokemon"> | Date | string
  tipos?: Prisma.PokemonTipoListRelationFilter
}

export type PokemonOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  numero?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  grunido?: Prisma.SortOrder
  imagen?: Prisma.SortOrder
  ataque?: Prisma.SortOrder
  defensa?: Prisma.SortOrder
  ataque_especial?: Prisma.SortOrder
  defensa_especial?: Prisma.SortOrder
  velocidad?: Prisma.SortOrder
  altura?: Prisma.SortOrder
  peso?: Prisma.SortOrder
  sprite?: Prisma.SortOrder
  orden?: Prisma.SortOrder
  creadoEn?: Prisma.SortOrder
  actualizadoEn?: Prisma.SortOrder
  tipos?: Prisma.PokemonTipoOrderByRelationAggregateInput
}

export type PokemonWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  numero?: number
  nombre?: string
  AND?: Prisma.PokemonWhereInput | Prisma.PokemonWhereInput[]
  OR?: Prisma.PokemonWhereInput[]
  NOT?: Prisma.PokemonWhereInput | Prisma.PokemonWhereInput[]
  descripcion?: Prisma.StringFilter<"Pokemon"> | string
  grunido?: Prisma.StringFilter<"Pokemon"> | string
  imagen?: Prisma.StringFilter<"Pokemon"> | string
  ataque?: Prisma.IntFilter<"Pokemon"> | number
  defensa?: Prisma.IntFilter<"Pokemon"> | number
  ataque_especial?: Prisma.IntFilter<"Pokemon"> | number
  defensa_especial?: Prisma.IntFilter<"Pokemon"> | number
  velocidad?: Prisma.IntFilter<"Pokemon"> | number
  altura?: Prisma.IntFilter<"Pokemon"> | number
  peso?: Prisma.IntFilter<"Pokemon"> | number
  sprite?: Prisma.StringFilter<"Pokemon"> | string
  orden?: Prisma.IntFilter<"Pokemon"> | number
  creadoEn?: Prisma.DateTimeFilter<"Pokemon"> | Date | string
  actualizadoEn?: Prisma.DateTimeFilter<"Pokemon"> | Date | string
  tipos?: Prisma.PokemonTipoListRelationFilter
}, "id" | "numero" | "nombre">

export type PokemonOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  numero?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  grunido?: Prisma.SortOrder
  imagen?: Prisma.SortOrder
  ataque?: Prisma.SortOrder
  defensa?: Prisma.SortOrder
  ataque_especial?: Prisma.SortOrder
  defensa_especial?: Prisma.SortOrder
  velocidad?: Prisma.SortOrder
  altura?: Prisma.SortOrder
  peso?: Prisma.SortOrder
  sprite?: Prisma.SortOrder
  orden?: Prisma.SortOrder
  creadoEn?: Prisma.SortOrder
  actualizadoEn?: Prisma.SortOrder
  _count?: Prisma.PokemonCountOrderByAggregateInput
  _avg?: Prisma.PokemonAvgOrderByAggregateInput
  _max?: Prisma.PokemonMaxOrderByAggregateInput
  _min?: Prisma.PokemonMinOrderByAggregateInput
  _sum?: Prisma.PokemonSumOrderByAggregateInput
}

export type PokemonScalarWhereWithAggregatesInput = {
  AND?: Prisma.PokemonScalarWhereWithAggregatesInput | Prisma.PokemonScalarWhereWithAggregatesInput[]
  OR?: Prisma.PokemonScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PokemonScalarWhereWithAggregatesInput | Prisma.PokemonScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Pokemon"> | number
  numero?: Prisma.IntWithAggregatesFilter<"Pokemon"> | number
  nombre?: Prisma.StringWithAggregatesFilter<"Pokemon"> | string
  descripcion?: Prisma.StringWithAggregatesFilter<"Pokemon"> | string
  grunido?: Prisma.StringWithAggregatesFilter<"Pokemon"> | string
  imagen?: Prisma.StringWithAggregatesFilter<"Pokemon"> | string
  ataque?: Prisma.IntWithAggregatesFilter<"Pokemon"> | number
  defensa?: Prisma.IntWithAggregatesFilter<"Pokemon"> | number
  ataque_especial?: Prisma.IntWithAggregatesFilter<"Pokemon"> | number
  defensa_especial?: Prisma.IntWithAggregatesFilter<"Pokemon"> | number
  velocidad?: Prisma.IntWithAggregatesFilter<"Pokemon"> | number
  altura?: Prisma.IntWithAggregatesFilter<"Pokemon"> | number
  peso?: Prisma.IntWithAggregatesFilter<"Pokemon"> | number
  sprite?: Prisma.StringWithAggregatesFilter<"Pokemon"> | string
  orden?: Prisma.IntWithAggregatesFilter<"Pokemon"> | number
  creadoEn?: Prisma.DateTimeWithAggregatesFilter<"Pokemon"> | Date | string
  actualizadoEn?: Prisma.DateTimeWithAggregatesFilter<"Pokemon"> | Date | string
}

export type PokemonCreateInput = {
  numero: number
  nombre: string
  descripcion: string
  grunido: string
  imagen: string
  ataque: number
  defensa: number
  ataque_especial: number
  defensa_especial: number
  velocidad: number
  altura: number
  peso: number
  sprite: string
  orden: number
  creadoEn?: Date | string
  actualizadoEn?: Date | string
  tipos?: Prisma.PokemonTipoCreateNestedManyWithoutPokemonInput
}

export type PokemonUncheckedCreateInput = {
  id?: number
  numero: number
  nombre: string
  descripcion: string
  grunido: string
  imagen: string
  ataque: number
  defensa: number
  ataque_especial: number
  defensa_especial: number
  velocidad: number
  altura: number
  peso: number
  sprite: string
  orden: number
  creadoEn?: Date | string
  actualizadoEn?: Date | string
  tipos?: Prisma.PokemonTipoUncheckedCreateNestedManyWithoutPokemonInput
}

export type PokemonUpdateInput = {
  numero?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  grunido?: Prisma.StringFieldUpdateOperationsInput | string
  imagen?: Prisma.StringFieldUpdateOperationsInput | string
  ataque?: Prisma.IntFieldUpdateOperationsInput | number
  defensa?: Prisma.IntFieldUpdateOperationsInput | number
  ataque_especial?: Prisma.IntFieldUpdateOperationsInput | number
  defensa_especial?: Prisma.IntFieldUpdateOperationsInput | number
  velocidad?: Prisma.IntFieldUpdateOperationsInput | number
  altura?: Prisma.IntFieldUpdateOperationsInput | number
  peso?: Prisma.IntFieldUpdateOperationsInput | number
  sprite?: Prisma.StringFieldUpdateOperationsInput | string
  orden?: Prisma.IntFieldUpdateOperationsInput | number
  creadoEn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actualizadoEn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tipos?: Prisma.PokemonTipoUpdateManyWithoutPokemonNestedInput
}

export type PokemonUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  numero?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  grunido?: Prisma.StringFieldUpdateOperationsInput | string
  imagen?: Prisma.StringFieldUpdateOperationsInput | string
  ataque?: Prisma.IntFieldUpdateOperationsInput | number
  defensa?: Prisma.IntFieldUpdateOperationsInput | number
  ataque_especial?: Prisma.IntFieldUpdateOperationsInput | number
  defensa_especial?: Prisma.IntFieldUpdateOperationsInput | number
  velocidad?: Prisma.IntFieldUpdateOperationsInput | number
  altura?: Prisma.IntFieldUpdateOperationsInput | number
  peso?: Prisma.IntFieldUpdateOperationsInput | number
  sprite?: Prisma.StringFieldUpdateOperationsInput | string
  orden?: Prisma.IntFieldUpdateOperationsInput | number
  creadoEn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actualizadoEn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tipos?: Prisma.PokemonTipoUncheckedUpdateManyWithoutPokemonNestedInput
}

export type PokemonCreateManyInput = {
  id?: number
  numero: number
  nombre: string
  descripcion: string
  grunido: string
  imagen: string
  ataque: number
  defensa: number
  ataque_especial: number
  defensa_especial: number
  velocidad: number
  altura: number
  peso: number
  sprite: string
  orden: number
  creadoEn?: Date | string
  actualizadoEn?: Date | string
}

export type PokemonUpdateManyMutationInput = {
  numero?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  grunido?: Prisma.StringFieldUpdateOperationsInput | string
  imagen?: Prisma.StringFieldUpdateOperationsInput | string
  ataque?: Prisma.IntFieldUpdateOperationsInput | number
  defensa?: Prisma.IntFieldUpdateOperationsInput | number
  ataque_especial?: Prisma.IntFieldUpdateOperationsInput | number
  defensa_especial?: Prisma.IntFieldUpdateOperationsInput | number
  velocidad?: Prisma.IntFieldUpdateOperationsInput | number
  altura?: Prisma.IntFieldUpdateOperationsInput | number
  peso?: Prisma.IntFieldUpdateOperationsInput | number
  sprite?: Prisma.StringFieldUpdateOperationsInput | string
  orden?: Prisma.IntFieldUpdateOperationsInput | number
  creadoEn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actualizadoEn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PokemonUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  numero?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  grunido?: Prisma.StringFieldUpdateOperationsInput | string
  imagen?: Prisma.StringFieldUpdateOperationsInput | string
  ataque?: Prisma.IntFieldUpdateOperationsInput | number
  defensa?: Prisma.IntFieldUpdateOperationsInput | number
  ataque_especial?: Prisma.IntFieldUpdateOperationsInput | number
  defensa_especial?: Prisma.IntFieldUpdateOperationsInput | number
  velocidad?: Prisma.IntFieldUpdateOperationsInput | number
  altura?: Prisma.IntFieldUpdateOperationsInput | number
  peso?: Prisma.IntFieldUpdateOperationsInput | number
  sprite?: Prisma.StringFieldUpdateOperationsInput | string
  orden?: Prisma.IntFieldUpdateOperationsInput | number
  creadoEn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actualizadoEn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PokemonCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  numero?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  grunido?: Prisma.SortOrder
  imagen?: Prisma.SortOrder
  ataque?: Prisma.SortOrder
  defensa?: Prisma.SortOrder
  ataque_especial?: Prisma.SortOrder
  defensa_especial?: Prisma.SortOrder
  velocidad?: Prisma.SortOrder
  altura?: Prisma.SortOrder
  peso?: Prisma.SortOrder
  sprite?: Prisma.SortOrder
  orden?: Prisma.SortOrder
  creadoEn?: Prisma.SortOrder
  actualizadoEn?: Prisma.SortOrder
}

export type PokemonAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  numero?: Prisma.SortOrder
  ataque?: Prisma.SortOrder
  defensa?: Prisma.SortOrder
  ataque_especial?: Prisma.SortOrder
  defensa_especial?: Prisma.SortOrder
  velocidad?: Prisma.SortOrder
  altura?: Prisma.SortOrder
  peso?: Prisma.SortOrder
  orden?: Prisma.SortOrder
}

export type PokemonMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  numero?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  grunido?: Prisma.SortOrder
  imagen?: Prisma.SortOrder
  ataque?: Prisma.SortOrder
  defensa?: Prisma.SortOrder
  ataque_especial?: Prisma.SortOrder
  defensa_especial?: Prisma.SortOrder
  velocidad?: Prisma.SortOrder
  altura?: Prisma.SortOrder
  peso?: Prisma.SortOrder
  sprite?: Prisma.SortOrder
  orden?: Prisma.SortOrder
  creadoEn?: Prisma.SortOrder
  actualizadoEn?: Prisma.SortOrder
}

export type PokemonMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  numero?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  grunido?: Prisma.SortOrder
  imagen?: Prisma.SortOrder
  ataque?: Prisma.SortOrder
  defensa?: Prisma.SortOrder
  ataque_especial?: Prisma.SortOrder
  defensa_especial?: Prisma.SortOrder
  velocidad?: Prisma.SortOrder
  altura?: Prisma.SortOrder
  peso?: Prisma.SortOrder
  sprite?: Prisma.SortOrder
  orden?: Prisma.SortOrder
  creadoEn?: Prisma.SortOrder
  actualizadoEn?: Prisma.SortOrder
}

export type PokemonSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  numero?: Prisma.SortOrder
  ataque?: Prisma.SortOrder
  defensa?: Prisma.SortOrder
  ataque_especial?: Prisma.SortOrder
  defensa_especial?: Prisma.SortOrder
  velocidad?: Prisma.SortOrder
  altura?: Prisma.SortOrder
  peso?: Prisma.SortOrder
  orden?: Prisma.SortOrder
}

export type PokemonScalarRelationFilter = {
  is?: Prisma.PokemonWhereInput
  isNot?: Prisma.PokemonWhereInput
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type PokemonCreateNestedOneWithoutTiposInput = {
  create?: Prisma.XOR<Prisma.PokemonCreateWithoutTiposInput, Prisma.PokemonUncheckedCreateWithoutTiposInput>
  connectOrCreate?: Prisma.PokemonCreateOrConnectWithoutTiposInput
  connect?: Prisma.PokemonWhereUniqueInput
}

export type PokemonUpdateOneRequiredWithoutTiposNestedInput = {
  create?: Prisma.XOR<Prisma.PokemonCreateWithoutTiposInput, Prisma.PokemonUncheckedCreateWithoutTiposInput>
  connectOrCreate?: Prisma.PokemonCreateOrConnectWithoutTiposInput
  upsert?: Prisma.PokemonUpsertWithoutTiposInput
  connect?: Prisma.PokemonWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PokemonUpdateToOneWithWhereWithoutTiposInput, Prisma.PokemonUpdateWithoutTiposInput>, Prisma.PokemonUncheckedUpdateWithoutTiposInput>
}

export type PokemonCreateWithoutTiposInput = {
  numero: number
  nombre: string
  descripcion: string
  grunido: string
  imagen: string
  ataque: number
  defensa: number
  ataque_especial: number
  defensa_especial: number
  velocidad: number
  altura: number
  peso: number
  sprite: string
  orden: number
  creadoEn?: Date | string
  actualizadoEn?: Date | string
}

export type PokemonUncheckedCreateWithoutTiposInput = {
  id?: number
  numero: number
  nombre: string
  descripcion: string
  grunido: string
  imagen: string
  ataque: number
  defensa: number
  ataque_especial: number
  defensa_especial: number
  velocidad: number
  altura: number
  peso: number
  sprite: string
  orden: number
  creadoEn?: Date | string
  actualizadoEn?: Date | string
}

export type PokemonCreateOrConnectWithoutTiposInput = {
  where: Prisma.PokemonWhereUniqueInput
  create: Prisma.XOR<Prisma.PokemonCreateWithoutTiposInput, Prisma.PokemonUncheckedCreateWithoutTiposInput>
}

export type PokemonUpsertWithoutTiposInput = {
  update: Prisma.XOR<Prisma.PokemonUpdateWithoutTiposInput, Prisma.PokemonUncheckedUpdateWithoutTiposInput>
  create: Prisma.XOR<Prisma.PokemonCreateWithoutTiposInput, Prisma.PokemonUncheckedCreateWithoutTiposInput>
  where?: Prisma.PokemonWhereInput
}

export type PokemonUpdateToOneWithWhereWithoutTiposInput = {
  where?: Prisma.PokemonWhereInput
  data: Prisma.XOR<Prisma.PokemonUpdateWithoutTiposInput, Prisma.PokemonUncheckedUpdateWithoutTiposInput>
}

export type PokemonUpdateWithoutTiposInput = {
  numero?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  grunido?: Prisma.StringFieldUpdateOperationsInput | string
  imagen?: Prisma.StringFieldUpdateOperationsInput | string
  ataque?: Prisma.IntFieldUpdateOperationsInput | number
  defensa?: Prisma.IntFieldUpdateOperationsInput | number
  ataque_especial?: Prisma.IntFieldUpdateOperationsInput | number
  defensa_especial?: Prisma.IntFieldUpdateOperationsInput | number
  velocidad?: Prisma.IntFieldUpdateOperationsInput | number
  altura?: Prisma.IntFieldUpdateOperationsInput | number
  peso?: Prisma.IntFieldUpdateOperationsInput | number
  sprite?: Prisma.StringFieldUpdateOperationsInput | string
  orden?: Prisma.IntFieldUpdateOperationsInput | number
  creadoEn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actualizadoEn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PokemonUncheckedUpdateWithoutTiposInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  numero?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  grunido?: Prisma.StringFieldUpdateOperationsInput | string
  imagen?: Prisma.StringFieldUpdateOperationsInput | string
  ataque?: Prisma.IntFieldUpdateOperationsInput | number
  defensa?: Prisma.IntFieldUpdateOperationsInput | number
  ataque_especial?: Prisma.IntFieldUpdateOperationsInput | number
  defensa_especial?: Prisma.IntFieldUpdateOperationsInput | number
  velocidad?: Prisma.IntFieldUpdateOperationsInput | number
  altura?: Prisma.IntFieldUpdateOperationsInput | number
  peso?: Prisma.IntFieldUpdateOperationsInput | number
  sprite?: Prisma.StringFieldUpdateOperationsInput | string
  orden?: Prisma.IntFieldUpdateOperationsInput | number
  creadoEn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actualizadoEn?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PokemonCountOutputType
 */

export type PokemonCountOutputType = {
  tipos: number
}

export type PokemonCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tipos?: boolean | PokemonCountOutputTypeCountTiposArgs
}

/**
 * PokemonCountOutputType without action
 */
export type PokemonCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PokemonCountOutputType
   */
  select?: Prisma.PokemonCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PokemonCountOutputType without action
 */
export type PokemonCountOutputTypeCountTiposArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PokemonTipoWhereInput
}


export type PokemonSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  numero?: boolean
  nombre?: boolean
  descripcion?: boolean
  grunido?: boolean
  imagen?: boolean
  ataque?: boolean
  defensa?: boolean
  ataque_especial?: boolean
  defensa_especial?: boolean
  velocidad?: boolean
  altura?: boolean
  peso?: boolean
  sprite?: boolean
  orden?: boolean
  creadoEn?: boolean
  actualizadoEn?: boolean
  tipos?: boolean | Prisma.Pokemon$tiposArgs<ExtArgs>
  _count?: boolean | Prisma.PokemonCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pokemon"]>

export type PokemonSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  numero?: boolean
  nombre?: boolean
  descripcion?: boolean
  grunido?: boolean
  imagen?: boolean
  ataque?: boolean
  defensa?: boolean
  ataque_especial?: boolean
  defensa_especial?: boolean
  velocidad?: boolean
  altura?: boolean
  peso?: boolean
  sprite?: boolean
  orden?: boolean
  creadoEn?: boolean
  actualizadoEn?: boolean
}, ExtArgs["result"]["pokemon"]>

export type PokemonSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  numero?: boolean
  nombre?: boolean
  descripcion?: boolean
  grunido?: boolean
  imagen?: boolean
  ataque?: boolean
  defensa?: boolean
  ataque_especial?: boolean
  defensa_especial?: boolean
  velocidad?: boolean
  altura?: boolean
  peso?: boolean
  sprite?: boolean
  orden?: boolean
  creadoEn?: boolean
  actualizadoEn?: boolean
}, ExtArgs["result"]["pokemon"]>

export type PokemonSelectScalar = {
  id?: boolean
  numero?: boolean
  nombre?: boolean
  descripcion?: boolean
  grunido?: boolean
  imagen?: boolean
  ataque?: boolean
  defensa?: boolean
  ataque_especial?: boolean
  defensa_especial?: boolean
  velocidad?: boolean
  altura?: boolean
  peso?: boolean
  sprite?: boolean
  orden?: boolean
  creadoEn?: boolean
  actualizadoEn?: boolean
}

export type PokemonOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "numero" | "nombre" | "descripcion" | "grunido" | "imagen" | "ataque" | "defensa" | "ataque_especial" | "defensa_especial" | "velocidad" | "altura" | "peso" | "sprite" | "orden" | "creadoEn" | "actualizadoEn", ExtArgs["result"]["pokemon"]>
export type PokemonInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tipos?: boolean | Prisma.Pokemon$tiposArgs<ExtArgs>
  _count?: boolean | Prisma.PokemonCountOutputTypeDefaultArgs<ExtArgs>
}
export type PokemonIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PokemonIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PokemonPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Pokemon"
  objects: {
    tipos: Prisma.$PokemonTipoPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    numero: number
    nombre: string
    descripcion: string
    grunido: string
    imagen: string
    ataque: number
    defensa: number
    ataque_especial: number
    defensa_especial: number
    velocidad: number
    altura: number
    peso: number
    sprite: string
    orden: number
    creadoEn: Date
    actualizadoEn: Date
  }, ExtArgs["result"]["pokemon"]>
  composites: {}
}

export type PokemonGetPayload<S extends boolean | null | undefined | PokemonDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PokemonPayload, S>

export type PokemonCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PokemonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PokemonCountAggregateInputType | true
  }

export interface PokemonDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pokemon'], meta: { name: 'Pokemon' } }
  /**
   * Find zero or one Pokemon that matches the filter.
   * @param {PokemonFindUniqueArgs} args - Arguments to find a Pokemon
   * @example
   * // Get one Pokemon
   * const pokemon = await prisma.pokemon.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PokemonFindUniqueArgs>(args: Prisma.SelectSubset<T, PokemonFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PokemonClient<runtime.Types.Result.GetResult<Prisma.$PokemonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Pokemon that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PokemonFindUniqueOrThrowArgs} args - Arguments to find a Pokemon
   * @example
   * // Get one Pokemon
   * const pokemon = await prisma.pokemon.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PokemonFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PokemonFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PokemonClient<runtime.Types.Result.GetResult<Prisma.$PokemonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Pokemon that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PokemonFindFirstArgs} args - Arguments to find a Pokemon
   * @example
   * // Get one Pokemon
   * const pokemon = await prisma.pokemon.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PokemonFindFirstArgs>(args?: Prisma.SelectSubset<T, PokemonFindFirstArgs<ExtArgs>>): Prisma.Prisma__PokemonClient<runtime.Types.Result.GetResult<Prisma.$PokemonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Pokemon that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PokemonFindFirstOrThrowArgs} args - Arguments to find a Pokemon
   * @example
   * // Get one Pokemon
   * const pokemon = await prisma.pokemon.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PokemonFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PokemonFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PokemonClient<runtime.Types.Result.GetResult<Prisma.$PokemonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Pokemon that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PokemonFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Pokemon
   * const pokemon = await prisma.pokemon.findMany()
   * 
   * // Get first 10 Pokemon
   * const pokemon = await prisma.pokemon.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pokemonWithIdOnly = await prisma.pokemon.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PokemonFindManyArgs>(args?: Prisma.SelectSubset<T, PokemonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PokemonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Pokemon.
   * @param {PokemonCreateArgs} args - Arguments to create a Pokemon.
   * @example
   * // Create one Pokemon
   * const Pokemon = await prisma.pokemon.create({
   *   data: {
   *     // ... data to create a Pokemon
   *   }
   * })
   * 
   */
  create<T extends PokemonCreateArgs>(args: Prisma.SelectSubset<T, PokemonCreateArgs<ExtArgs>>): Prisma.Prisma__PokemonClient<runtime.Types.Result.GetResult<Prisma.$PokemonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Pokemon.
   * @param {PokemonCreateManyArgs} args - Arguments to create many Pokemon.
   * @example
   * // Create many Pokemon
   * const pokemon = await prisma.pokemon.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PokemonCreateManyArgs>(args?: Prisma.SelectSubset<T, PokemonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Pokemon and returns the data saved in the database.
   * @param {PokemonCreateManyAndReturnArgs} args - Arguments to create many Pokemon.
   * @example
   * // Create many Pokemon
   * const pokemon = await prisma.pokemon.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Pokemon and only return the `id`
   * const pokemonWithIdOnly = await prisma.pokemon.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PokemonCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PokemonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PokemonPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Pokemon.
   * @param {PokemonDeleteArgs} args - Arguments to delete one Pokemon.
   * @example
   * // Delete one Pokemon
   * const Pokemon = await prisma.pokemon.delete({
   *   where: {
   *     // ... filter to delete one Pokemon
   *   }
   * })
   * 
   */
  delete<T extends PokemonDeleteArgs>(args: Prisma.SelectSubset<T, PokemonDeleteArgs<ExtArgs>>): Prisma.Prisma__PokemonClient<runtime.Types.Result.GetResult<Prisma.$PokemonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Pokemon.
   * @param {PokemonUpdateArgs} args - Arguments to update one Pokemon.
   * @example
   * // Update one Pokemon
   * const pokemon = await prisma.pokemon.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PokemonUpdateArgs>(args: Prisma.SelectSubset<T, PokemonUpdateArgs<ExtArgs>>): Prisma.Prisma__PokemonClient<runtime.Types.Result.GetResult<Prisma.$PokemonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Pokemon.
   * @param {PokemonDeleteManyArgs} args - Arguments to filter Pokemon to delete.
   * @example
   * // Delete a few Pokemon
   * const { count } = await prisma.pokemon.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PokemonDeleteManyArgs>(args?: Prisma.SelectSubset<T, PokemonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Pokemon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PokemonUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Pokemon
   * const pokemon = await prisma.pokemon.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PokemonUpdateManyArgs>(args: Prisma.SelectSubset<T, PokemonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Pokemon and returns the data updated in the database.
   * @param {PokemonUpdateManyAndReturnArgs} args - Arguments to update many Pokemon.
   * @example
   * // Update many Pokemon
   * const pokemon = await prisma.pokemon.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Pokemon and only return the `id`
   * const pokemonWithIdOnly = await prisma.pokemon.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PokemonUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PokemonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PokemonPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Pokemon.
   * @param {PokemonUpsertArgs} args - Arguments to update or create a Pokemon.
   * @example
   * // Update or create a Pokemon
   * const pokemon = await prisma.pokemon.upsert({
   *   create: {
   *     // ... data to create a Pokemon
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Pokemon we want to update
   *   }
   * })
   */
  upsert<T extends PokemonUpsertArgs>(args: Prisma.SelectSubset<T, PokemonUpsertArgs<ExtArgs>>): Prisma.Prisma__PokemonClient<runtime.Types.Result.GetResult<Prisma.$PokemonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Pokemon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PokemonCountArgs} args - Arguments to filter Pokemon to count.
   * @example
   * // Count the number of Pokemon
   * const count = await prisma.pokemon.count({
   *   where: {
   *     // ... the filter for the Pokemon we want to count
   *   }
   * })
  **/
  count<T extends PokemonCountArgs>(
    args?: Prisma.Subset<T, PokemonCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PokemonCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Pokemon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PokemonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PokemonAggregateArgs>(args: Prisma.Subset<T, PokemonAggregateArgs>): Prisma.PrismaPromise<GetPokemonAggregateType<T>>

  /**
   * Group by Pokemon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PokemonGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PokemonGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PokemonGroupByArgs['orderBy'] }
      : { orderBy?: PokemonGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PokemonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPokemonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Pokemon model
 */
readonly fields: PokemonFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Pokemon.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PokemonClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  tipos<T extends Prisma.Pokemon$tiposArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Pokemon$tiposArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PokemonTipoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Pokemon model
 */
export interface PokemonFieldRefs {
  readonly id: Prisma.FieldRef<"Pokemon", 'Int'>
  readonly numero: Prisma.FieldRef<"Pokemon", 'Int'>
  readonly nombre: Prisma.FieldRef<"Pokemon", 'String'>
  readonly descripcion: Prisma.FieldRef<"Pokemon", 'String'>
  readonly grunido: Prisma.FieldRef<"Pokemon", 'String'>
  readonly imagen: Prisma.FieldRef<"Pokemon", 'String'>
  readonly ataque: Prisma.FieldRef<"Pokemon", 'Int'>
  readonly defensa: Prisma.FieldRef<"Pokemon", 'Int'>
  readonly ataque_especial: Prisma.FieldRef<"Pokemon", 'Int'>
  readonly defensa_especial: Prisma.FieldRef<"Pokemon", 'Int'>
  readonly velocidad: Prisma.FieldRef<"Pokemon", 'Int'>
  readonly altura: Prisma.FieldRef<"Pokemon", 'Int'>
  readonly peso: Prisma.FieldRef<"Pokemon", 'Int'>
  readonly sprite: Prisma.FieldRef<"Pokemon", 'String'>
  readonly orden: Prisma.FieldRef<"Pokemon", 'Int'>
  readonly creadoEn: Prisma.FieldRef<"Pokemon", 'DateTime'>
  readonly actualizadoEn: Prisma.FieldRef<"Pokemon", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Pokemon findUnique
 */
export type PokemonFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pokemon
   */
  select?: Prisma.PokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pokemon
   */
  omit?: Prisma.PokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonInclude<ExtArgs> | null
  /**
   * Filter, which Pokemon to fetch.
   */
  where: Prisma.PokemonWhereUniqueInput
}

/**
 * Pokemon findUniqueOrThrow
 */
export type PokemonFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pokemon
   */
  select?: Prisma.PokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pokemon
   */
  omit?: Prisma.PokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonInclude<ExtArgs> | null
  /**
   * Filter, which Pokemon to fetch.
   */
  where: Prisma.PokemonWhereUniqueInput
}

/**
 * Pokemon findFirst
 */
export type PokemonFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pokemon
   */
  select?: Prisma.PokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pokemon
   */
  omit?: Prisma.PokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonInclude<ExtArgs> | null
  /**
   * Filter, which Pokemon to fetch.
   */
  where?: Prisma.PokemonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pokemon to fetch.
   */
  orderBy?: Prisma.PokemonOrderByWithRelationInput | Prisma.PokemonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Pokemon.
   */
  cursor?: Prisma.PokemonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pokemon from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pokemon.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Pokemon.
   */
  distinct?: Prisma.PokemonScalarFieldEnum | Prisma.PokemonScalarFieldEnum[]
}

/**
 * Pokemon findFirstOrThrow
 */
export type PokemonFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pokemon
   */
  select?: Prisma.PokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pokemon
   */
  omit?: Prisma.PokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonInclude<ExtArgs> | null
  /**
   * Filter, which Pokemon to fetch.
   */
  where?: Prisma.PokemonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pokemon to fetch.
   */
  orderBy?: Prisma.PokemonOrderByWithRelationInput | Prisma.PokemonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Pokemon.
   */
  cursor?: Prisma.PokemonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pokemon from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pokemon.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Pokemon.
   */
  distinct?: Prisma.PokemonScalarFieldEnum | Prisma.PokemonScalarFieldEnum[]
}

/**
 * Pokemon findMany
 */
export type PokemonFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pokemon
   */
  select?: Prisma.PokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pokemon
   */
  omit?: Prisma.PokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonInclude<ExtArgs> | null
  /**
   * Filter, which Pokemon to fetch.
   */
  where?: Prisma.PokemonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pokemon to fetch.
   */
  orderBy?: Prisma.PokemonOrderByWithRelationInput | Prisma.PokemonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Pokemon.
   */
  cursor?: Prisma.PokemonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pokemon from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pokemon.
   */
  skip?: number
  distinct?: Prisma.PokemonScalarFieldEnum | Prisma.PokemonScalarFieldEnum[]
}

/**
 * Pokemon create
 */
export type PokemonCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pokemon
   */
  select?: Prisma.PokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pokemon
   */
  omit?: Prisma.PokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonInclude<ExtArgs> | null
  /**
   * The data needed to create a Pokemon.
   */
  data: Prisma.XOR<Prisma.PokemonCreateInput, Prisma.PokemonUncheckedCreateInput>
}

/**
 * Pokemon createMany
 */
export type PokemonCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Pokemon.
   */
  data: Prisma.PokemonCreateManyInput | Prisma.PokemonCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Pokemon createManyAndReturn
 */
export type PokemonCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pokemon
   */
  select?: Prisma.PokemonSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Pokemon
   */
  omit?: Prisma.PokemonOmit<ExtArgs> | null
  /**
   * The data used to create many Pokemon.
   */
  data: Prisma.PokemonCreateManyInput | Prisma.PokemonCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Pokemon update
 */
export type PokemonUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pokemon
   */
  select?: Prisma.PokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pokemon
   */
  omit?: Prisma.PokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonInclude<ExtArgs> | null
  /**
   * The data needed to update a Pokemon.
   */
  data: Prisma.XOR<Prisma.PokemonUpdateInput, Prisma.PokemonUncheckedUpdateInput>
  /**
   * Choose, which Pokemon to update.
   */
  where: Prisma.PokemonWhereUniqueInput
}

/**
 * Pokemon updateMany
 */
export type PokemonUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Pokemon.
   */
  data: Prisma.XOR<Prisma.PokemonUpdateManyMutationInput, Prisma.PokemonUncheckedUpdateManyInput>
  /**
   * Filter which Pokemon to update
   */
  where?: Prisma.PokemonWhereInput
  /**
   * Limit how many Pokemon to update.
   */
  limit?: number
}

/**
 * Pokemon updateManyAndReturn
 */
export type PokemonUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pokemon
   */
  select?: Prisma.PokemonSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Pokemon
   */
  omit?: Prisma.PokemonOmit<ExtArgs> | null
  /**
   * The data used to update Pokemon.
   */
  data: Prisma.XOR<Prisma.PokemonUpdateManyMutationInput, Prisma.PokemonUncheckedUpdateManyInput>
  /**
   * Filter which Pokemon to update
   */
  where?: Prisma.PokemonWhereInput
  /**
   * Limit how many Pokemon to update.
   */
  limit?: number
}

/**
 * Pokemon upsert
 */
export type PokemonUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pokemon
   */
  select?: Prisma.PokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pokemon
   */
  omit?: Prisma.PokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonInclude<ExtArgs> | null
  /**
   * The filter to search for the Pokemon to update in case it exists.
   */
  where: Prisma.PokemonWhereUniqueInput
  /**
   * In case the Pokemon found by the `where` argument doesn't exist, create a new Pokemon with this data.
   */
  create: Prisma.XOR<Prisma.PokemonCreateInput, Prisma.PokemonUncheckedCreateInput>
  /**
   * In case the Pokemon was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PokemonUpdateInput, Prisma.PokemonUncheckedUpdateInput>
}

/**
 * Pokemon delete
 */
export type PokemonDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pokemon
   */
  select?: Prisma.PokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pokemon
   */
  omit?: Prisma.PokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonInclude<ExtArgs> | null
  /**
   * Filter which Pokemon to delete.
   */
  where: Prisma.PokemonWhereUniqueInput
}

/**
 * Pokemon deleteMany
 */
export type PokemonDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Pokemon to delete
   */
  where?: Prisma.PokemonWhereInput
  /**
   * Limit how many Pokemon to delete.
   */
  limit?: number
}

/**
 * Pokemon.tipos
 */
export type Pokemon$tiposArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PokemonTipo
   */
  select?: Prisma.PokemonTipoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PokemonTipo
   */
  omit?: Prisma.PokemonTipoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonTipoInclude<ExtArgs> | null
  where?: Prisma.PokemonTipoWhereInput
  orderBy?: Prisma.PokemonTipoOrderByWithRelationInput | Prisma.PokemonTipoOrderByWithRelationInput[]
  cursor?: Prisma.PokemonTipoWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PokemonTipoScalarFieldEnum | Prisma.PokemonTipoScalarFieldEnum[]
}

/**
 * Pokemon without action
 */
export type PokemonDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pokemon
   */
  select?: Prisma.PokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pokemon
   */
  omit?: Prisma.PokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonInclude<ExtArgs> | null
}

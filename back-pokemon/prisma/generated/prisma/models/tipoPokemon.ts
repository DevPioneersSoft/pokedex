
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `tipoPokemon` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model tipoPokemon
 * 
 */
export type tipoPokemonModel = runtime.Types.Result.DefaultSelection<Prisma.$tipoPokemonPayload>

export type AggregateTipoPokemon = {
  _count: TipoPokemonCountAggregateOutputType | null
  _avg: TipoPokemonAvgAggregateOutputType | null
  _sum: TipoPokemonSumAggregateOutputType | null
  _min: TipoPokemonMinAggregateOutputType | null
  _max: TipoPokemonMaxAggregateOutputType | null
}

export type TipoPokemonAvgAggregateOutputType = {
  id: number | null
}

export type TipoPokemonSumAggregateOutputType = {
  id: number | null
}

export type TipoPokemonMinAggregateOutputType = {
  id: number | null
  nombre: string | null
}

export type TipoPokemonMaxAggregateOutputType = {
  id: number | null
  nombre: string | null
}

export type TipoPokemonCountAggregateOutputType = {
  id: number
  nombre: number
  _all: number
}


export type TipoPokemonAvgAggregateInputType = {
  id?: true
}

export type TipoPokemonSumAggregateInputType = {
  id?: true
}

export type TipoPokemonMinAggregateInputType = {
  id?: true
  nombre?: true
}

export type TipoPokemonMaxAggregateInputType = {
  id?: true
  nombre?: true
}

export type TipoPokemonCountAggregateInputType = {
  id?: true
  nombre?: true
  _all?: true
}

export type TipoPokemonAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tipoPokemon to aggregate.
   */
  where?: Prisma.tipoPokemonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tipoPokemon to fetch.
   */
  orderBy?: Prisma.tipoPokemonOrderByWithRelationInput | Prisma.tipoPokemonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.tipoPokemonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tipoPokemon from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tipoPokemon.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned tipoPokemon
  **/
  _count?: true | TipoPokemonCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TipoPokemonAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TipoPokemonSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TipoPokemonMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TipoPokemonMaxAggregateInputType
}

export type GetTipoPokemonAggregateType<T extends TipoPokemonAggregateArgs> = {
      [P in keyof T & keyof AggregateTipoPokemon]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTipoPokemon[P]>
    : Prisma.GetScalarType<T[P], AggregateTipoPokemon[P]>
}




export type tipoPokemonGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.tipoPokemonWhereInput
  orderBy?: Prisma.tipoPokemonOrderByWithAggregationInput | Prisma.tipoPokemonOrderByWithAggregationInput[]
  by: Prisma.TipoPokemonScalarFieldEnum[] | Prisma.TipoPokemonScalarFieldEnum
  having?: Prisma.tipoPokemonScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TipoPokemonCountAggregateInputType | true
  _avg?: TipoPokemonAvgAggregateInputType
  _sum?: TipoPokemonSumAggregateInputType
  _min?: TipoPokemonMinAggregateInputType
  _max?: TipoPokemonMaxAggregateInputType
}

export type TipoPokemonGroupByOutputType = {
  id: number
  nombre: string
  _count: TipoPokemonCountAggregateOutputType | null
  _avg: TipoPokemonAvgAggregateOutputType | null
  _sum: TipoPokemonSumAggregateOutputType | null
  _min: TipoPokemonMinAggregateOutputType | null
  _max: TipoPokemonMaxAggregateOutputType | null
}

type GetTipoPokemonGroupByPayload<T extends tipoPokemonGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TipoPokemonGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TipoPokemonGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TipoPokemonGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TipoPokemonGroupByOutputType[P]>
      }
    >
  >



export type tipoPokemonWhereInput = {
  AND?: Prisma.tipoPokemonWhereInput | Prisma.tipoPokemonWhereInput[]
  OR?: Prisma.tipoPokemonWhereInput[]
  NOT?: Prisma.tipoPokemonWhereInput | Prisma.tipoPokemonWhereInput[]
  id?: Prisma.IntFilter<"tipoPokemon"> | number
  nombre?: Prisma.StringFilter<"tipoPokemon"> | string
  pokemones?: Prisma.PokemonTipoListRelationFilter
}

export type tipoPokemonOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  pokemones?: Prisma.PokemonTipoOrderByRelationAggregateInput
}

export type tipoPokemonWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  nombre?: string
  AND?: Prisma.tipoPokemonWhereInput | Prisma.tipoPokemonWhereInput[]
  OR?: Prisma.tipoPokemonWhereInput[]
  NOT?: Prisma.tipoPokemonWhereInput | Prisma.tipoPokemonWhereInput[]
  pokemones?: Prisma.PokemonTipoListRelationFilter
}, "id" | "nombre">

export type tipoPokemonOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  _count?: Prisma.tipoPokemonCountOrderByAggregateInput
  _avg?: Prisma.tipoPokemonAvgOrderByAggregateInput
  _max?: Prisma.tipoPokemonMaxOrderByAggregateInput
  _min?: Prisma.tipoPokemonMinOrderByAggregateInput
  _sum?: Prisma.tipoPokemonSumOrderByAggregateInput
}

export type tipoPokemonScalarWhereWithAggregatesInput = {
  AND?: Prisma.tipoPokemonScalarWhereWithAggregatesInput | Prisma.tipoPokemonScalarWhereWithAggregatesInput[]
  OR?: Prisma.tipoPokemonScalarWhereWithAggregatesInput[]
  NOT?: Prisma.tipoPokemonScalarWhereWithAggregatesInput | Prisma.tipoPokemonScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"tipoPokemon"> | number
  nombre?: Prisma.StringWithAggregatesFilter<"tipoPokemon"> | string
}

export type tipoPokemonCreateInput = {
  nombre: string
  pokemones?: Prisma.PokemonTipoCreateNestedManyWithoutTipoPokemonInput
}

export type tipoPokemonUncheckedCreateInput = {
  id?: number
  nombre: string
  pokemones?: Prisma.PokemonTipoUncheckedCreateNestedManyWithoutTipoPokemonInput
}

export type tipoPokemonUpdateInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  pokemones?: Prisma.PokemonTipoUpdateManyWithoutTipoPokemonNestedInput
}

export type tipoPokemonUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  pokemones?: Prisma.PokemonTipoUncheckedUpdateManyWithoutTipoPokemonNestedInput
}

export type tipoPokemonCreateManyInput = {
  id?: number
  nombre: string
}

export type tipoPokemonUpdateManyMutationInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type tipoPokemonUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type tipoPokemonCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
}

export type tipoPokemonAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type tipoPokemonMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
}

export type tipoPokemonMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
}

export type tipoPokemonSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type TipoPokemonScalarRelationFilter = {
  is?: Prisma.tipoPokemonWhereInput
  isNot?: Prisma.tipoPokemonWhereInput
}

export type tipoPokemonCreateNestedOneWithoutPokemonesInput = {
  create?: Prisma.XOR<Prisma.tipoPokemonCreateWithoutPokemonesInput, Prisma.tipoPokemonUncheckedCreateWithoutPokemonesInput>
  connectOrCreate?: Prisma.tipoPokemonCreateOrConnectWithoutPokemonesInput
  connect?: Prisma.tipoPokemonWhereUniqueInput
}

export type tipoPokemonUpdateOneRequiredWithoutPokemonesNestedInput = {
  create?: Prisma.XOR<Prisma.tipoPokemonCreateWithoutPokemonesInput, Prisma.tipoPokemonUncheckedCreateWithoutPokemonesInput>
  connectOrCreate?: Prisma.tipoPokemonCreateOrConnectWithoutPokemonesInput
  upsert?: Prisma.tipoPokemonUpsertWithoutPokemonesInput
  connect?: Prisma.tipoPokemonWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.tipoPokemonUpdateToOneWithWhereWithoutPokemonesInput, Prisma.tipoPokemonUpdateWithoutPokemonesInput>, Prisma.tipoPokemonUncheckedUpdateWithoutPokemonesInput>
}

export type tipoPokemonCreateWithoutPokemonesInput = {
  nombre: string
}

export type tipoPokemonUncheckedCreateWithoutPokemonesInput = {
  id?: number
  nombre: string
}

export type tipoPokemonCreateOrConnectWithoutPokemonesInput = {
  where: Prisma.tipoPokemonWhereUniqueInput
  create: Prisma.XOR<Prisma.tipoPokemonCreateWithoutPokemonesInput, Prisma.tipoPokemonUncheckedCreateWithoutPokemonesInput>
}

export type tipoPokemonUpsertWithoutPokemonesInput = {
  update: Prisma.XOR<Prisma.tipoPokemonUpdateWithoutPokemonesInput, Prisma.tipoPokemonUncheckedUpdateWithoutPokemonesInput>
  create: Prisma.XOR<Prisma.tipoPokemonCreateWithoutPokemonesInput, Prisma.tipoPokemonUncheckedCreateWithoutPokemonesInput>
  where?: Prisma.tipoPokemonWhereInput
}

export type tipoPokemonUpdateToOneWithWhereWithoutPokemonesInput = {
  where?: Prisma.tipoPokemonWhereInput
  data: Prisma.XOR<Prisma.tipoPokemonUpdateWithoutPokemonesInput, Prisma.tipoPokemonUncheckedUpdateWithoutPokemonesInput>
}

export type tipoPokemonUpdateWithoutPokemonesInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type tipoPokemonUncheckedUpdateWithoutPokemonesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type TipoPokemonCountOutputType
 */

export type TipoPokemonCountOutputType = {
  pokemones: number
}

export type TipoPokemonCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  pokemones?: boolean | TipoPokemonCountOutputTypeCountPokemonesArgs
}

/**
 * TipoPokemonCountOutputType without action
 */
export type TipoPokemonCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TipoPokemonCountOutputType
   */
  select?: Prisma.TipoPokemonCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TipoPokemonCountOutputType without action
 */
export type TipoPokemonCountOutputTypeCountPokemonesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PokemonTipoWhereInput
}


export type tipoPokemonSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
  pokemones?: boolean | Prisma.tipoPokemon$pokemonesArgs<ExtArgs>
  _count?: boolean | Prisma.TipoPokemonCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tipoPokemon"]>

export type tipoPokemonSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
}, ExtArgs["result"]["tipoPokemon"]>

export type tipoPokemonSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
}, ExtArgs["result"]["tipoPokemon"]>

export type tipoPokemonSelectScalar = {
  id?: boolean
  nombre?: boolean
}

export type tipoPokemonOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nombre", ExtArgs["result"]["tipoPokemon"]>
export type tipoPokemonInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  pokemones?: boolean | Prisma.tipoPokemon$pokemonesArgs<ExtArgs>
  _count?: boolean | Prisma.TipoPokemonCountOutputTypeDefaultArgs<ExtArgs>
}
export type tipoPokemonIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type tipoPokemonIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $tipoPokemonPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "tipoPokemon"
  objects: {
    pokemones: Prisma.$PokemonTipoPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    nombre: string
  }, ExtArgs["result"]["tipoPokemon"]>
  composites: {}
}

export type tipoPokemonGetPayload<S extends boolean | null | undefined | tipoPokemonDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$tipoPokemonPayload, S>

export type tipoPokemonCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<tipoPokemonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TipoPokemonCountAggregateInputType | true
  }

export interface tipoPokemonDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tipoPokemon'], meta: { name: 'tipoPokemon' } }
  /**
   * Find zero or one TipoPokemon that matches the filter.
   * @param {tipoPokemonFindUniqueArgs} args - Arguments to find a TipoPokemon
   * @example
   * // Get one TipoPokemon
   * const tipoPokemon = await prisma.tipoPokemon.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends tipoPokemonFindUniqueArgs>(args: Prisma.SelectSubset<T, tipoPokemonFindUniqueArgs<ExtArgs>>): Prisma.Prisma__tipoPokemonClient<runtime.Types.Result.GetResult<Prisma.$tipoPokemonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TipoPokemon that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {tipoPokemonFindUniqueOrThrowArgs} args - Arguments to find a TipoPokemon
   * @example
   * // Get one TipoPokemon
   * const tipoPokemon = await prisma.tipoPokemon.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends tipoPokemonFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, tipoPokemonFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__tipoPokemonClient<runtime.Types.Result.GetResult<Prisma.$tipoPokemonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TipoPokemon that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tipoPokemonFindFirstArgs} args - Arguments to find a TipoPokemon
   * @example
   * // Get one TipoPokemon
   * const tipoPokemon = await prisma.tipoPokemon.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends tipoPokemonFindFirstArgs>(args?: Prisma.SelectSubset<T, tipoPokemonFindFirstArgs<ExtArgs>>): Prisma.Prisma__tipoPokemonClient<runtime.Types.Result.GetResult<Prisma.$tipoPokemonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TipoPokemon that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tipoPokemonFindFirstOrThrowArgs} args - Arguments to find a TipoPokemon
   * @example
   * // Get one TipoPokemon
   * const tipoPokemon = await prisma.tipoPokemon.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends tipoPokemonFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, tipoPokemonFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__tipoPokemonClient<runtime.Types.Result.GetResult<Prisma.$tipoPokemonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TipoPokemon that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tipoPokemonFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TipoPokemon
   * const tipoPokemon = await prisma.tipoPokemon.findMany()
   * 
   * // Get first 10 TipoPokemon
   * const tipoPokemon = await prisma.tipoPokemon.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tipoPokemonWithIdOnly = await prisma.tipoPokemon.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends tipoPokemonFindManyArgs>(args?: Prisma.SelectSubset<T, tipoPokemonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$tipoPokemonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TipoPokemon.
   * @param {tipoPokemonCreateArgs} args - Arguments to create a TipoPokemon.
   * @example
   * // Create one TipoPokemon
   * const TipoPokemon = await prisma.tipoPokemon.create({
   *   data: {
   *     // ... data to create a TipoPokemon
   *   }
   * })
   * 
   */
  create<T extends tipoPokemonCreateArgs>(args: Prisma.SelectSubset<T, tipoPokemonCreateArgs<ExtArgs>>): Prisma.Prisma__tipoPokemonClient<runtime.Types.Result.GetResult<Prisma.$tipoPokemonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TipoPokemon.
   * @param {tipoPokemonCreateManyArgs} args - Arguments to create many TipoPokemon.
   * @example
   * // Create many TipoPokemon
   * const tipoPokemon = await prisma.tipoPokemon.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends tipoPokemonCreateManyArgs>(args?: Prisma.SelectSubset<T, tipoPokemonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TipoPokemon and returns the data saved in the database.
   * @param {tipoPokemonCreateManyAndReturnArgs} args - Arguments to create many TipoPokemon.
   * @example
   * // Create many TipoPokemon
   * const tipoPokemon = await prisma.tipoPokemon.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TipoPokemon and only return the `id`
   * const tipoPokemonWithIdOnly = await prisma.tipoPokemon.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends tipoPokemonCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, tipoPokemonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$tipoPokemonPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TipoPokemon.
   * @param {tipoPokemonDeleteArgs} args - Arguments to delete one TipoPokemon.
   * @example
   * // Delete one TipoPokemon
   * const TipoPokemon = await prisma.tipoPokemon.delete({
   *   where: {
   *     // ... filter to delete one TipoPokemon
   *   }
   * })
   * 
   */
  delete<T extends tipoPokemonDeleteArgs>(args: Prisma.SelectSubset<T, tipoPokemonDeleteArgs<ExtArgs>>): Prisma.Prisma__tipoPokemonClient<runtime.Types.Result.GetResult<Prisma.$tipoPokemonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TipoPokemon.
   * @param {tipoPokemonUpdateArgs} args - Arguments to update one TipoPokemon.
   * @example
   * // Update one TipoPokemon
   * const tipoPokemon = await prisma.tipoPokemon.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends tipoPokemonUpdateArgs>(args: Prisma.SelectSubset<T, tipoPokemonUpdateArgs<ExtArgs>>): Prisma.Prisma__tipoPokemonClient<runtime.Types.Result.GetResult<Prisma.$tipoPokemonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TipoPokemon.
   * @param {tipoPokemonDeleteManyArgs} args - Arguments to filter TipoPokemon to delete.
   * @example
   * // Delete a few TipoPokemon
   * const { count } = await prisma.tipoPokemon.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends tipoPokemonDeleteManyArgs>(args?: Prisma.SelectSubset<T, tipoPokemonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TipoPokemon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tipoPokemonUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TipoPokemon
   * const tipoPokemon = await prisma.tipoPokemon.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends tipoPokemonUpdateManyArgs>(args: Prisma.SelectSubset<T, tipoPokemonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TipoPokemon and returns the data updated in the database.
   * @param {tipoPokemonUpdateManyAndReturnArgs} args - Arguments to update many TipoPokemon.
   * @example
   * // Update many TipoPokemon
   * const tipoPokemon = await prisma.tipoPokemon.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TipoPokemon and only return the `id`
   * const tipoPokemonWithIdOnly = await prisma.tipoPokemon.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends tipoPokemonUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, tipoPokemonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$tipoPokemonPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TipoPokemon.
   * @param {tipoPokemonUpsertArgs} args - Arguments to update or create a TipoPokemon.
   * @example
   * // Update or create a TipoPokemon
   * const tipoPokemon = await prisma.tipoPokemon.upsert({
   *   create: {
   *     // ... data to create a TipoPokemon
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TipoPokemon we want to update
   *   }
   * })
   */
  upsert<T extends tipoPokemonUpsertArgs>(args: Prisma.SelectSubset<T, tipoPokemonUpsertArgs<ExtArgs>>): Prisma.Prisma__tipoPokemonClient<runtime.Types.Result.GetResult<Prisma.$tipoPokemonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TipoPokemon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tipoPokemonCountArgs} args - Arguments to filter TipoPokemon to count.
   * @example
   * // Count the number of TipoPokemon
   * const count = await prisma.tipoPokemon.count({
   *   where: {
   *     // ... the filter for the TipoPokemon we want to count
   *   }
   * })
  **/
  count<T extends tipoPokemonCountArgs>(
    args?: Prisma.Subset<T, tipoPokemonCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TipoPokemonCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TipoPokemon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TipoPokemonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TipoPokemonAggregateArgs>(args: Prisma.Subset<T, TipoPokemonAggregateArgs>): Prisma.PrismaPromise<GetTipoPokemonAggregateType<T>>

  /**
   * Group by TipoPokemon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {tipoPokemonGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends tipoPokemonGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: tipoPokemonGroupByArgs['orderBy'] }
      : { orderBy?: tipoPokemonGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, tipoPokemonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipoPokemonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the tipoPokemon model
 */
readonly fields: tipoPokemonFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for tipoPokemon.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__tipoPokemonClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  pokemones<T extends Prisma.tipoPokemon$pokemonesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.tipoPokemon$pokemonesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PokemonTipoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the tipoPokemon model
 */
export interface tipoPokemonFieldRefs {
  readonly id: Prisma.FieldRef<"tipoPokemon", 'Int'>
  readonly nombre: Prisma.FieldRef<"tipoPokemon", 'String'>
}
    

// Custom InputTypes
/**
 * tipoPokemon findUnique
 */
export type tipoPokemonFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tipoPokemon
   */
  select?: Prisma.tipoPokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tipoPokemon
   */
  omit?: Prisma.tipoPokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tipoPokemonInclude<ExtArgs> | null
  /**
   * Filter, which tipoPokemon to fetch.
   */
  where: Prisma.tipoPokemonWhereUniqueInput
}

/**
 * tipoPokemon findUniqueOrThrow
 */
export type tipoPokemonFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tipoPokemon
   */
  select?: Prisma.tipoPokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tipoPokemon
   */
  omit?: Prisma.tipoPokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tipoPokemonInclude<ExtArgs> | null
  /**
   * Filter, which tipoPokemon to fetch.
   */
  where: Prisma.tipoPokemonWhereUniqueInput
}

/**
 * tipoPokemon findFirst
 */
export type tipoPokemonFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tipoPokemon
   */
  select?: Prisma.tipoPokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tipoPokemon
   */
  omit?: Prisma.tipoPokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tipoPokemonInclude<ExtArgs> | null
  /**
   * Filter, which tipoPokemon to fetch.
   */
  where?: Prisma.tipoPokemonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tipoPokemon to fetch.
   */
  orderBy?: Prisma.tipoPokemonOrderByWithRelationInput | Prisma.tipoPokemonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tipoPokemon.
   */
  cursor?: Prisma.tipoPokemonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tipoPokemon from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tipoPokemon.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tipoPokemon.
   */
  distinct?: Prisma.TipoPokemonScalarFieldEnum | Prisma.TipoPokemonScalarFieldEnum[]
}

/**
 * tipoPokemon findFirstOrThrow
 */
export type tipoPokemonFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tipoPokemon
   */
  select?: Prisma.tipoPokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tipoPokemon
   */
  omit?: Prisma.tipoPokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tipoPokemonInclude<ExtArgs> | null
  /**
   * Filter, which tipoPokemon to fetch.
   */
  where?: Prisma.tipoPokemonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tipoPokemon to fetch.
   */
  orderBy?: Prisma.tipoPokemonOrderByWithRelationInput | Prisma.tipoPokemonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for tipoPokemon.
   */
  cursor?: Prisma.tipoPokemonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tipoPokemon from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tipoPokemon.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of tipoPokemon.
   */
  distinct?: Prisma.TipoPokemonScalarFieldEnum | Prisma.TipoPokemonScalarFieldEnum[]
}

/**
 * tipoPokemon findMany
 */
export type tipoPokemonFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tipoPokemon
   */
  select?: Prisma.tipoPokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tipoPokemon
   */
  omit?: Prisma.tipoPokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tipoPokemonInclude<ExtArgs> | null
  /**
   * Filter, which tipoPokemon to fetch.
   */
  where?: Prisma.tipoPokemonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of tipoPokemon to fetch.
   */
  orderBy?: Prisma.tipoPokemonOrderByWithRelationInput | Prisma.tipoPokemonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing tipoPokemon.
   */
  cursor?: Prisma.tipoPokemonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` tipoPokemon from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` tipoPokemon.
   */
  skip?: number
  distinct?: Prisma.TipoPokemonScalarFieldEnum | Prisma.TipoPokemonScalarFieldEnum[]
}

/**
 * tipoPokemon create
 */
export type tipoPokemonCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tipoPokemon
   */
  select?: Prisma.tipoPokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tipoPokemon
   */
  omit?: Prisma.tipoPokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tipoPokemonInclude<ExtArgs> | null
  /**
   * The data needed to create a tipoPokemon.
   */
  data: Prisma.XOR<Prisma.tipoPokemonCreateInput, Prisma.tipoPokemonUncheckedCreateInput>
}

/**
 * tipoPokemon createMany
 */
export type tipoPokemonCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many tipoPokemon.
   */
  data: Prisma.tipoPokemonCreateManyInput | Prisma.tipoPokemonCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * tipoPokemon createManyAndReturn
 */
export type tipoPokemonCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tipoPokemon
   */
  select?: Prisma.tipoPokemonSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the tipoPokemon
   */
  omit?: Prisma.tipoPokemonOmit<ExtArgs> | null
  /**
   * The data used to create many tipoPokemon.
   */
  data: Prisma.tipoPokemonCreateManyInput | Prisma.tipoPokemonCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * tipoPokemon update
 */
export type tipoPokemonUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tipoPokemon
   */
  select?: Prisma.tipoPokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tipoPokemon
   */
  omit?: Prisma.tipoPokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tipoPokemonInclude<ExtArgs> | null
  /**
   * The data needed to update a tipoPokemon.
   */
  data: Prisma.XOR<Prisma.tipoPokemonUpdateInput, Prisma.tipoPokemonUncheckedUpdateInput>
  /**
   * Choose, which tipoPokemon to update.
   */
  where: Prisma.tipoPokemonWhereUniqueInput
}

/**
 * tipoPokemon updateMany
 */
export type tipoPokemonUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update tipoPokemon.
   */
  data: Prisma.XOR<Prisma.tipoPokemonUpdateManyMutationInput, Prisma.tipoPokemonUncheckedUpdateManyInput>
  /**
   * Filter which tipoPokemon to update
   */
  where?: Prisma.tipoPokemonWhereInput
  /**
   * Limit how many tipoPokemon to update.
   */
  limit?: number
}

/**
 * tipoPokemon updateManyAndReturn
 */
export type tipoPokemonUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tipoPokemon
   */
  select?: Prisma.tipoPokemonSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the tipoPokemon
   */
  omit?: Prisma.tipoPokemonOmit<ExtArgs> | null
  /**
   * The data used to update tipoPokemon.
   */
  data: Prisma.XOR<Prisma.tipoPokemonUpdateManyMutationInput, Prisma.tipoPokemonUncheckedUpdateManyInput>
  /**
   * Filter which tipoPokemon to update
   */
  where?: Prisma.tipoPokemonWhereInput
  /**
   * Limit how many tipoPokemon to update.
   */
  limit?: number
}

/**
 * tipoPokemon upsert
 */
export type tipoPokemonUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tipoPokemon
   */
  select?: Prisma.tipoPokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tipoPokemon
   */
  omit?: Prisma.tipoPokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tipoPokemonInclude<ExtArgs> | null
  /**
   * The filter to search for the tipoPokemon to update in case it exists.
   */
  where: Prisma.tipoPokemonWhereUniqueInput
  /**
   * In case the tipoPokemon found by the `where` argument doesn't exist, create a new tipoPokemon with this data.
   */
  create: Prisma.XOR<Prisma.tipoPokemonCreateInput, Prisma.tipoPokemonUncheckedCreateInput>
  /**
   * In case the tipoPokemon was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.tipoPokemonUpdateInput, Prisma.tipoPokemonUncheckedUpdateInput>
}

/**
 * tipoPokemon delete
 */
export type tipoPokemonDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tipoPokemon
   */
  select?: Prisma.tipoPokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tipoPokemon
   */
  omit?: Prisma.tipoPokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tipoPokemonInclude<ExtArgs> | null
  /**
   * Filter which tipoPokemon to delete.
   */
  where: Prisma.tipoPokemonWhereUniqueInput
}

/**
 * tipoPokemon deleteMany
 */
export type tipoPokemonDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which tipoPokemon to delete
   */
  where?: Prisma.tipoPokemonWhereInput
  /**
   * Limit how many tipoPokemon to delete.
   */
  limit?: number
}

/**
 * tipoPokemon.pokemones
 */
export type tipoPokemon$pokemonesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PokemonTipo
   */
  select?: Prisma.PokemonTipoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PokemonTipo
   */
  omit?: Prisma.PokemonTipoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PokemonTipoInclude<ExtArgs> | null
  where?: Prisma.PokemonTipoWhereInput
  orderBy?: Prisma.PokemonTipoOrderByWithRelationInput | Prisma.PokemonTipoOrderByWithRelationInput[]
  cursor?: Prisma.PokemonTipoWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PokemonTipoScalarFieldEnum | Prisma.PokemonTipoScalarFieldEnum[]
}

/**
 * tipoPokemon without action
 */
export type tipoPokemonDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the tipoPokemon
   */
  select?: Prisma.tipoPokemonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the tipoPokemon
   */
  omit?: Prisma.tipoPokemonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.tipoPokemonInclude<ExtArgs> | null
}
